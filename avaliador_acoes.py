# Requisitos: Instale com 'pip install yfinance streamlit pandas matplotlib'

import yfinance as yf
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import unicodedata
import os
import requests
import io

# Lista simplificada de a√ß√µes e FIIs (adicione mais conforme desejar)
ATIVOS_B3 = [
    # Bancos
    {"Codigo": "ITUB4", "Nome": "Ita√∫ Unibanco"},
    {"Codigo": "BBDC4", "Nome": "Bradesco"},
    {"Codigo": "BBAS3", "Nome": "Banco do Brasil"},
    {"Codigo": "SANB11", "Nome": "Santander"},
    {"Codigo": "BPAC11", "Nome": "BTG Pactual"},
    # Commodities e energia
    {"Codigo": "VALE3", "Nome": "Vale"},
    {"Codigo": "PETR4", "Nome": "Petrobras PN"},
    {"Codigo": "PETR3", "Nome": "Petrobras ON"},
    {"Codigo": "SUZB3", "Nome": "Suzano"},
    {"Codigo": "CSNA3", "Nome": "CSN"},
    {"Codigo": "GGBR4", "Nome": "Gerdau"},
    {"Codigo": "USIM5", "Nome": "Usiminas"},
    {"Codigo": "JBSS3", "Nome": "JBS"},
    {"Codigo": "BRFS3", "Nome": "BRF"},
    # El√©tricas
    {"Codigo": "ELET3", "Nome": "Eletrobras ON"},
    {"Codigo": "ELET6", "Nome": "Eletrobras PNB"},
    {"Codigo": "ENBR3", "Nome": "EDP Brasil"},
    {"Codigo": "CMIG4", "Nome": "Cemig"},
    {"Codigo": "CPLE6", "Nome": "Copel"},
    {"Codigo": "TAEE11", "Nome": "Taesa"},
    {"Codigo": "ENGI11", "Nome": "Engie Brasil"},
    {"Codigo": "EQTL3", "Nome": "Equatorial"},
    # Varejo e consumo
    {"Codigo": "MGLU3", "Nome": "Magazine Luiza"},
    {"Codigo": "VIIA3", "Nome": "Via"},
    {"Codigo": "LREN3", "Nome": "Lojas Renner"},
    {"Codigo": "AMER3", "Nome": "Americanas"},
    {"Codigo": "RAIL3", "Nome": "Rumo"},
    {"Codigo": "WEGE3", "Nome": "WEG"},
    {"Codigo": "RENT3", "Nome": "Localiza"},
    {"Codigo": "ABEV3", "Nome": "Ambev"},
    {"Codigo": "B3SA3", "Nome": "B3"},
    {"Codigo": "CYRE3", "Nome": "Cyrela"},
    {"Codigo": "EZTC3", "Nome": "EZTEC"},
    {"Codigo": "MRVE3", "Nome": "MRV"},
    {"Codigo": "BRML3", "Nome": "BR Malls"},
    {"Codigo": "MULT3", "Nome": "Multiplan"},
    {"Codigo": "HYPE3", "Nome": "Hypera"},
    {"Codigo": "RADL3", "Nome": "Raia Drogasil"},
    {"Codigo": "SULA11", "Nome": "SulAm√©rica"},
    {"Codigo": "CIEL3", "Nome": "Cielo"},
    {"Codigo": "VVAR3", "Nome": "Via Varejo"},
    # FIIs populares
    {"Codigo": "HGLG11", "Nome": "CSHG Log√≠stica FII"},
    {"Codigo": "MXRF11", "Nome": "Maxi Renda FII"},
    {"Codigo": "KNRI11", "Nome": "Kinea Renda Imobili√°ria FII"},
    {"Codigo": "VISC11", "Nome": "Vinci Shopping Centers FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "HGBS11", "Nome": "CSHG Brasil Shopping FII"},
    {"Codigo": "BCFF11", "Nome": "BTG Pactual Fundo de Fundos FII"},
    {"Codigo": "VILG11", "Nome": "Vinci Log√≠stica FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "RECT11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RBRF11", "Nome": "RBR Alpha FII"},
    {"Codigo": "BBPO11", "Nome": "BB Progressivo II FII"},
    {"Codigo": "BRCR11", "Nome": "BTG Pactual Corporate Office Fund FII"},
    {"Codigo": "PLCR11", "Nome": "Plaza FII"},
    {"Codigo": "SHPH11", "Nome": "Shopping P√°tio Higien√≥polis FII"},
    # Adicione mais ativos conforme desejar!
]

def carregar_ativos_b3():
    df = pd.DataFrame(ATIVOS_B3)
    df['NomeBusca'] = df['Nome'].str.lower().apply(lambda x: unicodedata.normalize('NFKD', str(x)).encode('ascii', errors='ignore').decode('utf-8'))
    df['CodigoBusca'] = df['Codigo'].str.lower()
    return df

def buscar_codigo_por_nome(nome, df_ativos):
    if df_ativos.empty:
        return None
    nome = nome.strip().lower()
    nome = unicodedata.normalize('NFKD', nome).encode('ascii', errors='ignore').decode('utf-8')
    resultados = df_ativos[df_ativos['NomeBusca'].str.contains(nome)]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    resultados = df_ativos[df_ativos['CodigoBusca'] == nome]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    return None

def formatar_codigo_acao(codigo):
    codigo = codigo.strip().upper()
    if not codigo.endswith('.SA'):
        codigo = f"{codigo}.SA"
    return codigo

def obter_dados(codigo):
    codigo_formatado = formatar_codigo_acao(codigo)
    acao = yf.Ticker(codigo_formatado)
    info = acao.info
    historico = acao.history(period="1y")
    return info, historico

def mostrar_dados_fundamentais(info):
    st.subheader("Dados Fundamentais")
    st.write(f"**Empresa/FII:** {info.get('longName', 'N/A')}")
    st.write(f"**Setor:** {info.get('sector', 'N/A')}")
    st.write(f"**Pre√ßo atual:** R$ {info.get('previousClose', 'N/A'):.2f}")
    st.write(f"**P/L:** {info.get('trailingPE', 'N/A')} *<small>(Pre√ßo/Lucro - Qu√£o cara est√° a a√ß√£o em rela√ß√£o ao lucro)</small>*", unsafe_allow_html=True)
    st.write(f"**P/VPA:** {info.get('priceToBook', 'N/A')} *<small>(Pre√ßo/Valor Patrimonial por A√ß√£o - Qu√£o cara est√° a a√ß√£o em rela√ß√£o ao seu valor cont√°bil)</small>*", unsafe_allow_html=True)
    st.write(f"**Dividend Yield:** {round(info.get('dividendYield', 0) * 100, 2) if info.get('dividendYield') is not None else 'N/A'}% *<small>(Rendimento em dividendos nos √∫ltimos 12 meses)</small>*", unsafe_allow_html=True)
    st.write(f"**EV/EBITDA:** {info.get('enterpriseToEbitda', 'N/A')} *<small>(Valor da Empresa/EBITDA - Usado para comparar empresas, especialmente no mesmo setor)</small>*", unsafe_allow_html=True)
    st.write(f"**D√≠vida L√≠quida/EBITDA:** {info.get('debtToEbitda', 'N/A')} *<small>(Capacidade de pagar a d√≠vida com o lucro operacional)</small>*", unsafe_allow_html=True)
    st.write(f"**ROE:** {round(info.get('returnOnEquity', 0) * 100, 2) if info.get('returnOnEquity') is not None else 'N/A'}% *<small>(Rentabilidade sobre o Patrim√¥nio L√≠quido)</small>*", unsafe_allow_html=True)
    st.write(f"**Margem Bruta:** {round(info.get('grossMargins', 0) * 100, 2) if info.get('grossMargins') is not None else 'N/A'}% *<small>(Lucro Bruto sobre a Receita Total)</small>*", unsafe_allow_html=True)
    st.write(f"**Margem L√≠quida:** {round(info.get('profitMargins', 0) * 100, 2) if info.get('profitMargins') is not None else 'N/A'}% *<small>(Lucro L√≠quido sobre a Receita Total)</small>*", unsafe_allow_html=True)
    st.write(f"**Payout Ratio (Distribui√ß√£o de Dividendos):** {round(info.get('payoutRatio', 0) * 100, 2) if info.get('payoutRatio') is not None else 'N/A'}% *<small>(Percentual do lucro distribu√≠do como dividendos)</small>*", unsafe_allow_html=True)
    st.write(f"**Liquidez Corrente:** {info.get('currentRatio', 'N/A')} *<small>(Capacidade de pagar d√≠vidas de curto prazo)</small>*", unsafe_allow_html=True)
    st.write(f"**Caixa Total:** R$ {info.get('totalCash', 'N/A'):,.2f}")
    st.write(f"**D√≠vida Total:** R$ {info.get('totalDebt', 'N/A'):,.2f}")
    st.write(f"**Lucro por a√ß√£o (EPS):** {info.get('trailingEps', 'N/A')} *<small>(Lucro por a√ß√£o nos √∫ltimos 12 meses)</small>*", unsafe_allow_html=True)

def mostrar_grafico(historico):
    st.subheader("Tend√™ncia de Pre√ßo - √öltimo Ano")
    fig, ax = plt.subplots(figsize=(12, 6))
    historico['Close'].plot(ax=ax, color='#2196F3', linewidth=2)
    ax.set_ylabel("Pre√ßo de Fechamento (R$)")
    ax.set_xlabel("Data")
    ax.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(rotation=45)
    st.pyplot(fig)

def analise_temporal(historico):
    st.subheader("üìä An√°lise Temporal")
    historico.index = historico.index.tz_localize(None)
    tres_meses_atras = datetime.now() - timedelta(days=90)
    dados_3m = historico[historico.index >= tres_meses_atras]
    variacao_3m = ((dados_3m['Close'].iloc[-1] / dados_3m['Close'].iloc[0]) - 1) * 100 if not dados_3m.empty else 0
    seis_meses_atras = datetime.now() - timedelta(days=180)
    dados_6m = historico[historico.index >= seis_meses_atras]
    variacao_6m = ((dados_6m['Close'].iloc[-1] / dados_6m['Close'].iloc[0]) - 1) * 100 if not dados_6m.empty else 0
    variacao_1a = ((historico['Close'].iloc[-1] / historico['Close'].iloc[0]) - 1) * 100 if not historico.empty else 0
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Varia√ß√£o 3 meses", f"{variacao_3m:.2f}%")
    with col2:
        st.metric("Varia√ß√£o 6 meses", f"{variacao_6m:.2f}%")
    with col3:
        st.metric("Varia√ß√£o 1 ano", f"{variacao_1a:.2f}%")

# ====== NOVO: Perfil do investidor ======
perfil = st.selectbox(
    'Qual seu perfil de investimento?',
    [
        'Neutro',
        'Crescimento (busca valoriza√ß√£o)',
        'Dividendos (busca renda passiva)',
        'Curto prazo',
        'M√©dio prazo',
        'Longo prazo',
        'Baixa toler√¢ncia a risco',
        'Alta toler√¢ncia a risco'
    ]
)

# ====== NOVO: An√°lise Setorial e Not√≠cias ======
def analise_setorial_noticias(info, codigo_acao):
    st.subheader("üåê An√°lise Setorial e Not√≠cias")
    setor = info.get('sector', 'N/A')
    explicacao = {
        'Financial Services': 'Setor financeiro tende a ser resiliente, mas sens√≠vel a juros. Inclui bancos, seguradoras e servi√ßos de investimento.',
        'Energy': 'Setor de energia pode ser c√≠clico e sens√≠vel a commodities e geopol√≠tica. Inclui petr√≥leo, g√°s e energias renov√°veis.',
        'Utilities': 'Setor de utilidade p√∫blica costuma ser defensivo e regulado. Inclui empresas de energia el√©trica, √°gua e g√°s.',
        'Real Estate': 'Setor imobili√°rio √© sens√≠vel a juros, infla√ß√£o e ciclos econ√¥micos. Inclui construtoras, incorporadoras e fundos imobili√°rios (FIIs).',
        'Consumer Defensive': 'Setor defensivo, menos sens√≠vel a crises econ√¥micas. Inclui alimentos, bebidas, produtos dom√©sticos e higiene.',
        'Basic Materials': 'Setor de commodities √© c√≠clico e depende do mercado global e pre√ßos das mat√©rias-primas. Inclui minera√ß√£o, siderurgia, papel e celulose.',
        'Industrials': 'Setor industrial depende do crescimento econ√¥mico e investimento em infraestrutura. Inclui bens de capital, transporte e servi√ßos industriais.',
        'Healthcare': 'Setor de sa√∫de tende a ser resiliente. Inclui hospitais, laborat√≥rios e farmac√™uticas.',
        'Technology': 'Setor de tecnologia pode ter alto crescimento, mas tamb√©m volatilidade. Inclui software, hardware e servi√ßos de TI.',
        'Consumer Cyclical': 'Setor c√≠clico, sens√≠vel ao consumo e renda dispon√≠vel. Inclui varejo (n√£o defensivo), viagens e lazer.',
        'Communication Services': 'Setor de servi√ßos de comunica√ß√£o. Inclui telecomunica√ß√µes e m√≠dia.',
        'N/A': 'Setor n√£o informado.'
    }
    st.write(f"**Setor:** **{setor}**")
    st.info(explicacao.get(setor, 'Setor n√£o identificado ou sem explica√ß√£o detalhada dispon√≠vel.'))
    st.markdown("---")
    st.subheader("üì∞ Not√≠cias Recentes")
    try:
        ticker_obj = yf.Ticker(codigo_acao)
        noticias = ticker_obj.news
        if noticias:
            for n in noticias[:5]: # Exibir as 5 not√≠cias mais recentes
                st.write(f"**{n['title']}**")
                st.write(f"*Fonte: {n['publisher']} - {datetime.fromtimestamp(n['providerPublishTime']).strftime('%d/%m/%Y %H:%M')}*")
                st.write(n['link'])
        else:
            st.info("Nenhuma not√≠cia recente encontrada.")
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel buscar not√≠cias: {e}")

# ====== MELHORIA: Recomenda√ß√µes personalizadas ======
def analise_sugestiva(info, perfil):
    st.subheader("üìå Recomenda√ß√µes por Horizonte de Investimento e Perfil")
    pl = info.get('trailingPE')
    dy = info.get('dividendYield')
    roe = info.get('returnOnEquity')
    debt_equity = info.get('debtToEquity')
    price_to_book = info.get('priceToBook')
    ev_ebitda = info.get('enterpriseToEbitda')
    debt_ebitda = info.get('debtToEbitda')
    current_ratio = info.get('currentRatio')
    payout_ratio = info.get('payoutRatio')
    sugestoes = []
    score = 0
    max_score = 10

    # Pontua√ß√£o e sugest√µes baseadas no perfil

    # Crescimento (busca valoriza√ß√£o) / Longo prazo
    if 'crescimento' in perfil.lower() or 'longo' in perfil.lower():
        if roe is not None:
            if roe > 0.15: # Bom ROE para crescimento
                sugestoes.append("üìà ROE forte (Mais de 15%). Potencial de crescimento a longo prazo.")
                score += 2
            elif roe > 0.08:
                 sugestoes.append("‚ÑπÔ∏è ROE moderado. Rentabilidade razo√°vel sobre o patrim√¥nio.")
                 score += 1
        if pl is not None:
            if pl < 15: # P/L razo√°vel para crescimento
                sugestoes.append("‚úÖ P/L razo√°vel (Abaixo de 15). Indicativo de valoriza√ß√£o.")
                score += 2
            elif pl < 25:
                sugestoes.append("‚ÑπÔ∏è P/L moderado (Entre 15 e 25). Aten√ß√£o ao valuation.")
                score += 1
            else:
                sugestoes.append("‚ö†Ô∏è P/L elevado (Acima de 25). A√ß√£o pode estar cara para o perfil crescimento.")
                score -= 1

    # Dividendos (busca renda passiva)
    if 'dividendos' in perfil.lower():
        if dy is not None:
            if dy > 0.06: # Bom Dividend Yield
                sugestoes.append("üí∞ Excelente Dividend Yield (Mais de 6%). √ìtimo para renda passiva.")
                score += 3
            elif dy > 0.04:
                sugestoes.append("‚úÖ Bom Dividend Yield (Entre 4% e 6%). Boa op√ß√£o para dividendos.")
                score += 2
            elif dy > 0.02:
                 sugestoes.append("‚ÑπÔ∏è Dividend Yield moderado (Entre 2% e 4%).")
                 score += 1
            else:
                sugestoes.append("‚ö†Ô∏è Dividend Yield baixo (Abaixo de 2%). N√£o ideal para foco em dividendos.")
                score -= 1
        else:
             sugestoes.append("‚ÑπÔ∏è Dividend Yield n√£o dispon√≠vel ou muito baixo.")
             score -= 1
        if payout_ratio is not None and payout_ratio > 0.5 and payout_ratio < 1.1: # Payout saud√°vel (distribui lucro)
             sugestoes.append("‚úÖ Payout Ratio saud√°vel. Empresa distribui parte do lucro como dividendos.")
             score += 1
        elif payout_ratio is not None and payout_ratio >= 1.1:
             sugestoes.append("‚ö†Ô∏è Payout Ratio acima de 100%. Empresa pode estar distribuindo mais do que lucra.")
             score -= 1

    # Risco e Sa√∫de Financeira (Baixa toler√¢ncia / Neutro)
    if 'baixa' in perfil.lower() or 'neutro' in perfil.lower():
        if debt_equity is not None:
            if debt_equity < 0.8: # Baixa alavancagem
                sugestoes.append("üí™ Baixa alavancagem financeira (D√≠vida/Patrim√¥nio abaixo de 0.8). Baixo risco financeiro.")
                score += 2
            elif debt_equity < 1.5:
                sugestoes.append("‚úÖ Alavancagem financeira moderada (D√≠vida/Patrim√¥nio entre 0.8 e 1.5).")
                score += 1
            else:
                sugestoes.append(f"‚ö†Ô∏è Alavancagem financeira elevada (D√≠vida/Patrim√¥nio: {debt_equity:.2f}). Maior risco financeiro para perfil conservador.")
                score -= 2
        if debt_ebitda is not None:
            if debt_ebitda < 2: # Baixa d√≠vida em rela√ß√£o ao Ebitda
                 sugestoes.append("üí™ D√≠vida L√≠quida/EBITDA baixa (Abaixo de 2). Empresa gera caixa para pagar d√≠vida.")
                 score += 2
            elif debt_ebitda < 3.5:
                 sugestoes.append("‚úÖ D√≠vida L√≠quida/EBITDA moderada (Entre 2 e 3.5).")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è D√≠vida L√≠quida/EBITDA elevada ({debt_ebitda:.2f}). Aten√ß√£o ao endividamento.")
                 score -= 2
        if current_ratio is not None:
            if current_ratio > 1.8: # Boa liquidez
                 sugestoes.append("üí™ √ìtima liquidez corrente (Acima de 1.8). Forte capacidade de pagar d√≠vidas de curto prazo.")
                 score += 2
            elif current_ratio > 1.2:
                 sugestoes.append("‚úÖ Boa liquidez corrente (Entre 1.2 e 1.8). Capacidade saud√°vel de pagamento no curto prazo.")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è Liquidez corrente baixa ({current_ratio:.2f}). Aten√ß√£o √† capacidade de pagamento no curto prazo.")
                 score -= 2

    # Risco (Alta toler√¢ncia)
    if 'alta' in perfil.lower():
         if debt_equity is not None and debt_equity > 2.5: # Alta alavancagem pode ser tolerada, mas com alerta
              sugestoes.append(f"‚ÑπÔ∏è Alavancagem alta ({debt_equity:.2f}). Perfil de maior risco pode considerar, mas com cautela.")

    # Recomenda√ß√µes gerais de Valuation (para todos, exceto se conflitar muito com perfil espec√≠fico)
    if 'neutro' in perfil.lower() or ('crescimento' not in perfil.lower() and 'dividendos' not in perfil.lower()):
        if pl is not None and pl > 25:
            sugestoes.append(f"‚ö†Ô∏è P/L elevado ({pl:.2f}), aten√ß√£o ao valuation.")
        if price_to_book is not None and price_to_book > 2.5:
            sugestoes.append(f"‚ö†Ô∏è P/VPA elevado ({price_to_book:.2f}), aten√ß√£o ao valuation.")
        if ev_ebitda is not None and ev_ebitda > 15:
            sugestoes.append(f"‚ö†Ô∏è EV/EBITDA elevado ({ev_ebitda:.2f}). Pode indicar empresa cara.")

    # Ajustar score para a escala 0-10 (simplificado)
    # Definir limites m√≠nimos e m√°ximos razo√°veis para o score bruto
    min_raw_score = -8 # Estimativa do menor score poss√≠vel
    max_raw_score = 10 # Estimativa do maior score poss√≠vel
    # Mapear o score bruto para a escala 0-10
    score_final = max(0, min(10, round((score - min_raw_score) / (max_raw_score - min_raw_score) * 10)))

    st.markdown("--- ")
    st.subheader("Sum√°rio e Score Fundamental (Simplificado)")
    st.write(f"**Perfil Selecionado:** {perfil}")
    st.write(f"**Score Fundamental (0-10):** **{score_final}/10**")
    if score_final >= 8:
        st.success("‚≠ê An√°lise Fundamentalista Forte para o perfil.")
    elif score_final >= 5:
        st.info("‚úÖ An√°lise Fundamentalista Moderada para o perfil.")
    else:
        st.warning("‚ö†Ô∏è An√°lise Fundamentalista Apresenta Pontos de Aten√ß√£o para o perfil.")

    st.markdown("--- ")
    st.subheader("Detalhamento das Sugest√µes:")
    if not sugestoes:
        st.info("Sem alertas ou sugest√µes relevantes com base nos indicadores e perfil selecionado.")
    for s in sugestoes:
        if "üìà" in s or "üí∞" in s or "üí™" in s or "‚úÖ" in s:
            st.success(s)
        elif "‚ö†Ô∏è" in s:
            st.warning(s)
        else:
            st.info(s)

# App Streamlit
st.title("üìà Avaliador de A√ß√µes e FIIs - Fundamentalista e T√©cnico")

with st.expander("üîç Como analisar uma a√ß√£o ou FII? (clique para ver dicas)"):
    st.markdown("""
**1. An√°lise Fundamentalista (sa√∫de e valor da empresa)**  
- **Lucro e crescimento:**  
  - Lucro por a√ß√£o (LPA): mede o lucro l√≠quido dividido pelo n√∫mero de a√ß√µes.  
  - Hist√≥rico de crescimento: a empresa est√° crescendo ano ap√≥s ano?  
- **Valuation (valor justo da a√ß√£o):**  
  - P/L (Pre√ßo/Lucro): compara o pre√ßo da a√ß√£o com o lucro da empresa. Um P/L muito alto pode indicar a√ß√£o cara.  
  - P/VPA (Pre√ßo/Valor Patrimonial por A√ß√£o): mede quanto o mercado est√° pagando sobre o valor cont√°bil da empresa.  
  - Dividend Yield: rendimento que o investidor recebe em dividendos.  
  - EV/EBITDA: √∫til para comparar empresas do mesmo setor.  
- **Endividamento:**  
  - D√≠vida l√≠quida/EBITDA: mostra se a empresa tem f√¥lego para pagar suas d√≠vidas.  
  - Grau de alavancagem: d√≠vida sobre o patrim√¥nio.  
- **Governan√ßa corporativa:**  
  - A empresa tem pr√°ticas transparentes e s√≥lidas de gest√£o?  
  - Est√° envolvida em esc√¢ndalos ou investiga√ß√µes?  

**2. An√°lise T√©cnica (movimento do pre√ßo da a√ß√£o)**  
- Suporte e resist√™ncia  
- Tend√™ncia de alta ou baixa  
- Volume de negocia√ß√µes  
- Indicadores t√©cnicos: IFR (√çndice de For√ßa Relativa), MACD, m√©dias m√≥veis  

**3. An√°lise Setorial e Macroecon√¥mica**  
- O setor da empresa est√° em crescimento ou retra√ß√£o?  
- Como a economia afeta o neg√≥cio (juros, infla√ß√£o, c√¢mbio)?  
- A empresa est√° exposta a riscos regulat√≥rios?  

**4. Perfil do investidor**  
- Voc√™ busca crescimento ou renda passiva (dividendos)?  
- Qual seu prazo de investimento?  
- Qual o seu n√≠vel de toler√¢ncia a risco?  
    """)

df_ativos = carregar_ativos_b3()

nome_empresa = st.text_input("Nome da empresa ou fundo:")
codigo_sugerido = ""
if not df_ativos.empty and nome_empresa:
    codigo_sugerido = buscar_codigo_por_nome(nome_empresa, df_ativos)

if codigo_sugerido:
    st.info(f"C√≥digo sugerido: {codigo_sugerido}")
    codigo = st.text_input("C√≥digo da a√ß√£o/FII:", value=codigo_sugerido)
else:
    codigo = st.text_input("C√≥digo da a√ß√£o/FII:")

if st.button("Analisar"):
    try:
        info, historico = obter_dados(codigo)
        mostrar_dados_fundamentais(info)
        mostrar_grafico(historico)
        analise_temporal(historico)
        analise_setorial_noticias(info, codigo)
        analise_sugestiva(info, perfil)
    except Exception as e:
        st.error(f"Erro ao buscar dados: {e}")
