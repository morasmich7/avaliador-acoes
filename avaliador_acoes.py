# Requisitos: Instale com 'pip install yfinance streamlit pandas matplotlib requests beautifulsoup4'

import yfinance as yf
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import unicodedata
import os
import requests
from bs4 import BeautifulSoup
import io

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Avaliador de A√ß√µes e FIIs",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Lista simplificada de a√ß√µes e FIIs (adicione mais conforme desejar)
ATIVOS_B3 = [
    # Bancos
    {"Codigo": "ITUB4", "Nome": "Ita√∫ Unibanco"},
    {"Codigo": "BBDC4", "Nome": "Bradesco"},
    {"Codigo": "BBAS3", "Nome": "Banco do Brasil"},
    {"Codigo": "SANB11", "Nome": "Santander"},
    {"Codigo": "BPAC11", "Nome": "BTG Pactual"},
    # Commodities e energia
    {"Codigo": "VALE3", "Nome": "Vale"},
    {"Codigo": "PETR4", "Nome": "Petrobras PN"},
    {"Codigo": "PETR3", "Nome": "Petrobras ON"},
    {"Codigo": "SUZB3", "Nome": "Suzano"},
    {"Codigo": "CSNA3", "Nome": "CSN"},
    {"Codigo": "GGBR4", "Nome": "Gerdau"},
    {"Codigo": "USIM5", "Nome": "Usiminas"},
    {"Codigo": "JBSS3", "Nome": "JBS"},
    {"Codigo": "BRFS3", "Nome": "BRF"},
    # El√©tricas
    {"Codigo": "ELET3", "Nome": "Eletrobras ON"},
    {"Codigo": "ELET6", "Nome": "Eletrobras PNB"},
    {"Codigo": "ENBR3", "Nome": "EDP Brasil"},
    {"Codigo": "CMIG4", "Nome": "Cemig"},
    {"Codigo": "CPLE6", "Nome": "Copel"},
    {"Codigo": "TAEE11", "Nome": "Taesa"},
    {"Codigo": "ENGI11", "Nome": "Engie Brasil"},
    {"Codigo": "EQTL3", "Nome": "Equatorial"},
    # Varejo e consumo
    {"Codigo": "MGLU3", "Nome": "Magazine Luiza"},
    {"Codigo": "VIIA3", "Nome": "Via"},
    {"Codigo": "LREN3", "Nome": "Lojas Renner"},
    {"Codigo": "AMER3", "Nome": "Americanas"},
    {"Codigo": "RAIL3", "Nome": "Rumo"},
    {"Codigo": "WEGE3", "Nome": "WEG"},
    {"Codigo": "RENT3", "Nome": "Localiza"},
    {"Codigo": "ABEV3", "Nome": "Ambev"},
    {"Codigo": "B3SA3", "Nome": "B3"},
    {"Codigo": "CYRE3", "Nome": "Cyrela"},
    {"Codigo": "EZTC3", "Nome": "EZTEC"},
    {"Codigo": "MRVE3", "Nome": "MRV"},
    {"Codigo": "BRML3", "Nome": "BR Malls"},
    {"Codigo": "MULT3", "Nome": "Multiplan"},
    {"Codigo": "HYPE3", "Nome": "Hypera"},
    {"Codigo": "RADL3", "Nome": "Raia Drogasil"},
    {"Codigo": "SULA11", "Nome": "SulAm√©rica"},
    {"Codigo": "CIEL3", "Nome": "Cielo"},
    {"Codigo": "VVAR3", "Nome": "Via Varejo"},
    # FIIs populares
    {"Codigo": "HGLG11", "Nome": "CSHG Log√≠stica FII"},
    {"Codigo": "MXRF11", "Nome": "Maxi Renda FII"},
    {"Codigo": "KNRI11", "Nome": "Kinea Renda Imobili√°ria FII"},
    {"Codigo": "VISC11", "Nome": "Vinci Shopping Centers FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "HGBS11", "Nome": "CSHG Brasil Shopping FII"},
    {"Codigo": "BCFF11", "Nome": "BTG Pactual Fundo de Fundos FII"},
    {"Codigo": "VILG11", "Nome": "Vinci Log√≠stica FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "RECT11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RBRF11", "Nome": "RBR Alpha FII"},
    {"Codigo": "BBPO11", "Nome": "BB Progressivo II FII"},
    {"Codigo": "BRCR11", "Nome": "BTG Pactual Corporate Office Fund FII"},
    {"Codigo": "PLCR11", "Nome": "Plaza FII"},
    {"Codigo": "SHPH11", "Nome": "Shopping P√°tio Higien√≥polis FII"},
    # Adicione mais ativos conforme desejar!
]

def carregar_ativos_b3():
    df = pd.DataFrame(ATIVOS_B3)
    df['NomeBusca'] = df['Nome'].str.lower().apply(lambda x: unicodedata.normalize('NFKD', str(x)).encode('ascii', errors='ignore').decode('utf-8'))
    df['CodigoBusca'] = df['Codigo'].str.lower()
    return df

def buscar_codigo_por_nome(nome, df_ativos):
    if df_ativos.empty:
        return None
    nome = nome.strip().lower()
    nome = unicodedata.normalize('NFKD', nome).encode('ascii', errors='ignore').decode('utf-8')
    resultados = df_ativos[df_ativos['NomeBusca'].str.contains(nome)]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    resultados = df_ativos[df_ativos['CodigoBusca'] == nome]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    return None

def formatar_codigo_acao(codigo):
    codigo = codigo.strip().upper()
    if not codigo.endswith('.SA'):
        codigo = f"{codigo}.SA"
    return codigo

def obter_dados(codigo):
    codigo_formatado = formatar_codigo_acao(codigo)
    acao = yf.Ticker(codigo_formatado)
    info = acao.info
    historico = acao.history(period="1y")
    return info, historico

def mostrar_dados_fundamentais(info):
    st.subheader("üìä Dados Fundamentais")
    
    # Criar colunas para os dados fundamentais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Informa√ß√µes B√°sicas")
        with st.container(): # Usando container para agrupar
            st.write(f"**Empresa/FII:** {info.get('longName', 'N/A')}")
            st.write(f"**Setor:** {info.get('sector', 'N/A')}")
            st.write(f"**Pre√ßo atual:** R$ {info.get('previousClose', 'N/A'):.2f}")
        
        st.markdown("### Indicadores de Valuation")
        with st.container(): # Usando container para agrupar
            st.write(f"**P/L:** {info.get('trailingPE', 'N/A')} *<small>(Pre√ßo/Lucro)</small>*", unsafe_allow_html=True)
            st.write(f"**P/VPA:** {info.get('priceToBook', 'N/A')} *<small>(Pre√ßo/Valor Patrimonial)</small>*", unsafe_allow_html=True)
            st.write(f"**EV/EBITDA:** {info.get('enterpriseToEbitda', 'N/A')} *<small>(Valor da Empresa/EBITDA)</small>*", unsafe_allow_html=True)
    
    with col2:
        st.markdown("### Indicadores de Rentabilidade")
        with st.container(): # Usando container para agrupar
            st.write(f"**Dividend Yield:** {round(info.get('dividendYield', 0) * 100, 2) if info.get('dividendYield') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**ROE:** {round(info.get('returnOnEquity', 0) * 100, 2) if info.get('returnOnEquity') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**Margem Bruta:** {round(info.get('grossMargins', 0) * 100, 2) if info.get('grossMargins') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**Margem L√≠quida:** {round(info.get('profitMargins', 0) * 100, 2) if info.get('profitMargins') is not None else 'N/A'}%", unsafe_allow_html=True)
        
        st.markdown("### Indicadores de Endividamento")
        with st.container(): # Usando container para agrupar
            st.write(f"**D√≠vida L√≠quida/EBITDA:** {info.get('debtToEbitda', 'N/A')}")
            st.write(f"**Liquidez Corrente:** {info.get('currentRatio', 'N/A')}")
            st.write(f"**Caixa Total:** R$ {info.get('totalCash', 'N/A'):,.2f}")
            st.write(f"**D√≠vida Total:** R$ {info.get('totalDebt', 'N/A'):,.2f}")

def mostrar_grafico(historico):
    st.subheader("üìà Tend√™ncia de Pre√ßo")
    fig, ax = plt.subplots(figsize=(12, 6))
    historico['Close'].plot(ax=ax, color='#2196F3', linewidth=2)
    ax.set_ylabel("Pre√ßo de Fechamento (R$)")
    ax.set_xlabel("Data")
    ax.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(rotation=45)
    st.pyplot(fig)

def analise_temporal(historico):
    st.subheader("‚è±Ô∏è An√°lise Temporal")
    historico.index = historico.index.tz_localize(None)
    tres_meses_atras = datetime.now() - timedelta(days=90)
    dados_3m = historico[historico.index >= tres_meses_atras]
    variacao_3m = ((dados_3m['Close'].iloc[-1] / dados_3m['Close'].iloc[0]) - 1) * 100 if not dados_3m.empty else 0
    seis_meses_atras = datetime.now() - timedelta(days=180)
    dados_6m = historico[historico.index >= seis_meses_atras]
    variacao_6m = ((dados_6m['Close'].iloc[-1] / dados_6m['Close'].iloc[0]) - 1) * 100 if not dados_6m.empty else 0
    variacao_1a = ((historico['Close'].iloc[-1] / historico['Close'].iloc[0]) - 1) * 100 if not historico.empty else 0
    
    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 3 meses")
            st.metric(label="", value=f"{variacao_3m:.2f}%")
    with col2:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 6 meses")
            st.metric(label="", value=f"{variacao_6m:.2f}%")
    with col3:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 1 ano")
            st.metric(label="", value=f"{variacao_1a:.2f}%")

# ====== NOVO: An√°lise Setorial e Not√≠cias ======
def analise_setorial_noticias(info, codigo_acao):
    st.subheader("üåê An√°lise Setorial e Not√≠cias")
    setor = info.get('sector', 'N/A')
    explicacao = {
        'Financial Services': 'Setor financeiro tende a ser resiliente, mas sens√≠vel a juros. Inclui bancos, seguradoras e servi√ßos de investimento.',
        'Energy': 'Setor de energia pode ser c√≠clico e sens√≠vel a commodities e geopol√≠tica. Inclui petr√≥leo, g√°s e energias renov√°veis.',
        'Utilities': 'Setor de utilidade p√∫blica costuma ser defensivo e regulado. Inclui empresas de energia el√©trica, √°gua e g√°s.',
        'Real Estate': 'Setor imobili√°rio √© sens√≠vel a juros, infla√ß√£o e ciclos econ√¥micos. Inclui construtoras, incorporadoras e fundos imobili√°rios (FIIs).',
        'Consumer Defensive': 'Setor defensivo, menos sens√≠vel a crises econ√¥micas. Inclui alimentos, bebidas, produtos dom√©sticos e higiene.',
        'Basic Materials': 'Setor de commodities √© c√≠clico e depende do mercado global e pre√ßos das mat√©rias-primas. Inclui minera√ß√£o, siderurgia, papel e celulose.',
        'Industrials': 'Setor industrial depende do crescimento econ√¥mico e investimento em infraestrutura. Inclui bens de capital, transporte e servi√ßos industriais.',
        'Healthcare': 'Setor de sa√∫de tende a ser resiliente. Inclui hospitais, laborat√≥rios e farmac√™uticas.',
        'Technology': 'Setor de tecnologia pode ter alto crescimento, mas tamb√©m volatilidade. Inclui software, hardware e servi√ßos de TI.',
        'Consumer Cyclical': 'Setor c√≠clico, sens√≠vel ao consumo e renda dispon√≠vel. Inclui varejo (n√£o defensivo), viagens e lazer.',
        'Communication Services': 'Setor de servi√ßos de comunica√ß√£o. Inclui telecomunica√ß√µes e m√≠dia.',
        'N/A': 'Setor n√£o informado.'
    }
    st.write(f"**Setor:** **{setor}**")
    st.info(explicacao.get(setor, 'Setor n√£o identificado ou sem explica√ß√£o detalhada dispon√≠vel.'))
    st.markdown("---")
    
    st.markdown("### üì∞ Not√≠cias Recentes")
    try:
        with st.spinner('Buscando not√≠cias recentes...'):
            ticker_obj = yf.Ticker(codigo_acao)
            noticias = ticker_obj.news
            
            if noticias:
                for n in noticias[:5]: # Exibir as 5 not√≠cias mais recentes
                    with st.container(): # Cada not√≠cia em um container
                        st.markdown(f"**[{n['title']}]({n['link']})**") # T√≠tulo clic√°vel
                        
                        # Formatar a data
                        try:
                            data = datetime.fromtimestamp(n['providerPublishTime'])
                            data_formatada = data.strftime('%d/%m/%Y %H:%M')
                        except:
                            data_formatada = "Data n√£o dispon√≠vel"
                        
                        # Exibir fonte e data
                        st.markdown(f"*Fonte: {n.get('publisher', 'Fonte n√£o dispon√≠vel')} - {data_formatada}* <br>", unsafe_allow_html=True)
                        
            else:
                st.info("Nenhuma not√≠cia recente encontrada para este ativo.")
                
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel buscar not√≠cias: {str(e)}")
        st.info("Dica: Alguns ativos podem n√£o ter not√≠cias dispon√≠veis ou podem estar com acesso temporariamente indispon√≠vel.")

# ====== MELHORIA: Recomenda√ß√µes personalizadas ======
def analise_sugestiva(info, perfil):
    st.subheader("üìå Recomenda√ß√µes por Horizonte de Investimento e Perfil")
    pl = info.get('trailingPE')
    dy = info.get('dividendYield')
    roe = info.get('returnOnEquity')
    debt_equity = info.get('debtToEquity')
    price_to_book = info.get('priceToBook')
    ev_ebitda = info.get('enterpriseToEbitda')
    debt_ebitda = info.get('debtToEbitda')
    current_ratio = info.get('currentRatio')
    payout_ratio = info.get('payoutRatio')
    sugestoes = []
    score = 0
    max_score = 10

    # Pontua√ß√£o e sugest√µes baseadas no perfil

    # Crescimento (busca valoriza√ß√£o) / Longo prazo
    if 'crescimento' in perfil.lower() or 'longo' in perfil.lower():
        if roe is not None:
            if roe > 0.15: # Bom ROE para crescimento
                sugestoes.append("üìà ROE forte (Mais de 15%). Potencial de crescimento a longo prazo.")
                score += 2
            elif roe > 0.08:
                 sugestoes.append("‚ÑπÔ∏è ROE moderado. Rentabilidade razo√°vel sobre o patrim√¥nio.")
                 score += 1
        if pl is not None:
            if pl < 15: # P/L razo√°vel para crescimento
                sugestoes.append("‚úÖ P/L razo√°vel (Abaixo de 15). Indicativo de valoriza√ß√£o.")
                score += 2
            elif pl < 25:
                sugestoes.append("‚ÑπÔ∏è P/L moderado (Entre 15 e 25). Aten√ß√£o ao valuation.")
                score += 1
            else:
                sugestoes.append("‚ö†Ô∏è P/L elevado (Acima de 25). A√ß√£o pode estar cara para o perfil crescimento.")
                score -= 1

    # Dividendos (busca renda passiva)
    if 'dividendos' in perfil.lower():
        if dy is not None:
            if dy > 0.06: # Bom Dividend Yield
                sugestoes.append("üí∞ Excelente Dividend Yield (Mais de 6%). √ìtimo para renda passiva.")
                score += 3
            elif dy > 0.04:
                sugestoes.append("‚úÖ Bom Dividend Yield (Entre 4% e 6%). Boa op√ß√£o para dividendos.")
                score += 2
            elif dy > 0.02:
                 sugestoes.append("‚ÑπÔ∏è Dividend Yield moderado (Entre 2% e 4%).")
                 score += 1
            else:
                sugestoes.append("‚ö†Ô∏è Dividend Yield baixo (Abaixo de 2%). N√£o ideal para foco em dividendos.")
                score -= 1
        else:
             sugestoes.append("‚ÑπÔ∏è Dividend Yield n√£o dispon√≠vel ou muito baixo.")
             score -= 1
        if payout_ratio is not None and payout_ratio > 0.5 and payout_ratio < 1.1: # Payout saud√°vel (distribui lucro)
             sugestoes.append("‚úÖ Payout Ratio saud√°vel. Empresa distribui parte do lucro como dividendos.")
             score += 1
        elif payout_ratio is not None and payout_ratio >= 1.1:
             sugestoes.append("‚ö†Ô∏è Payout Ratio acima de 100%. Empresa pode estar distribuindo mais do que lucra.")
             score -= 1

    # Risco e Sa√∫de Financeira (Baixa toler√¢ncia / Neutro)
    if 'baixa' in perfil.lower() or 'neutro' in perfil.lower():
        if debt_equity is not None:
            if debt_equity < 0.8: # Baixa alavancagem
                sugestoes.append("üí™ Baixa alavancagem financeira (D√≠vida/Patrim√¥nio abaixo de 0.8). Baixo risco financeiro.")
                score += 2
            elif debt_equity < 1.5:
                sugestoes.append("‚úÖ Alavancagem financeira moderada (D√≠vida/Patrim√¥nio entre 0.8 e 1.5).")
                score += 1
            else:
                sugestoes.append(f"‚ö†Ô∏è Alavancagem financeira elevada (D√≠vida/Patrim√¥nio: {debt_equity:.2f}). Maior risco financeiro para perfil conservador.")
                score -= 2
        if debt_ebitda is not None:
            if debt_ebitda < 2: # Baixa d√≠vida em rela√ß√£o ao Ebitda
                 sugestoes.append("üí™ D√≠vida L√≠quida/EBITDA baixa (Abaixo de 2). Empresa gera caixa para pagar d√≠vida.")
                 score += 2
            elif debt_ebitda < 3.5:
                 sugestoes.append("‚úÖ D√≠vida L√≠quida/EBITDA moderada (Entre 2 e 3.5).")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è D√≠vida L√≠quida/EBITDA elevada ({debt_ebitda:.2f}). Aten√ß√£o ao endividamento.")
                 score -= 2
        if current_ratio is not None:
            if current_ratio > 1.8: # Boa liquidez
                 sugestoes.append("üí™ √ìtima liquidez corrente (Acima de 1.8). Forte capacidade de pagar d√≠vidas de curto prazo.")
                 score += 2
            elif current_ratio > 1.2:
                 sugestoes.append("‚úÖ Boa liquidez corrente (Entre 1.2 e 1.8). Capacidade saud√°vel de pagamento no curto prazo.")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è Liquidez corrente baixa ({current_ratio:.2f}). Aten√ß√£o √† capacidade de pagamento no curto prazo.")
                 score -= 2

    # Risco (Alta toler√¢ncia)
    if 'alta' in perfil.lower():
         if debt_equity is not None and debt_equity > 2.5: # Alta alavancagem pode ser tolerada, mas com alerta
              sugestoes.append(f"‚ÑπÔ∏è Alavancagem alta ({debt_equity:.2f}). Perfil de maior risco pode considerar, mas com cautela.")

    # Recomenda√ß√µes gerais de Valuation (para todos, exceto se conflitar muito com perfil espec√≠fico)
    if 'neutro' in perfil.lower() or ('crescimento' not in perfil.lower() and 'dividendos' not in perfil.lower()):
        if pl is not None and pl > 25:
            sugestoes.append(f"‚ö†Ô∏è P/L elevado ({pl:.2f}), aten√ß√£o ao valuation.")
        if price_to_book is not None and price_to_book > 2.5:
            sugestoes.append(f"‚ö†Ô∏è P/VPA elevado ({price_to_book:.2f}), aten√ß√£o ao valuation.")
        if ev_ebitda is not None and ev_ebitda > 15:
            sugestoes.append(f"‚ö†Ô∏è EV/EBITDA elevado ({ev_ebitda:.2f}). Pode indicar empresa cara.")

    # Ajustar score para a escala 0-10 (simplificado)
    # Definir limites m√≠nimos e m√°ximos razo√°veis para o score bruto
    min_raw_score = -8 # Estimativa do menor score poss√≠vel
    max_raw_score = 10 # Estimativa do maior score poss√≠vel
    # Mapear o score bruto para a escala 0-10
    score_final = max(0, min(10, round((score - min_raw_score) / (max_raw_score - min_raw_score) * 10)))

    st.markdown("--- ")
    st.subheader("Sum√°rio e Score Fundamental (Simplificado)")
    st.write(f"**Perfil Selecionado:** {perfil}")
    st.write(f"**Score Fundamental (0-10):** **{score_final}/10**")
    if score_final >= 8:
        st.success("‚≠ê An√°lise Fundamentalista Forte para o perfil.")
    elif score_final >= 5:
        st.info("‚úÖ An√°lise Fundamentalista Moderada para o perfil.")
    else:
        st.warning("‚ö†Ô∏è An√°lise Fundamentalista Apresenta Pontos de Aten√ß√£o para o perfil.")

    st.markdown("--- ")
    st.subheader("Detalhamento das Sugest√µes:")
    if not sugestoes:
        st.info("Sem alertas ou sugest√µes relevantes com base nos indicadores e perfil selecionado.")
    for s in sugestoes:
        if "üìà" in s or "üí∞" in s or "üí™" in s or "‚úÖ" in s:
            st.success(s)
        elif "‚ö†Ô∏è" in s:
            st.warning(s)
        else:
            st.info(s)

def buscar_acoes_tradingview():
    """
    Busca todas as a√ß√µes listadas no TradingView Screener
    """
    try:
        url = "https://br.tradingview.com/screener/"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Aqui precisamos encontrar o elemento correto que cont√©m as a√ß√µes
            # Como o TradingView usa JavaScript para carregar os dados, precisaremos
            # usar uma abordagem diferente, como Selenium ou a API do TradingView
            
            st.warning("‚ö†Ô∏è A busca direta no TradingView n√£o est√° dispon√≠vel no momento devido a limita√ß√µes t√©cnicas.")
            st.info("üí° Sugest√£o: Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")
            
            return []
        else:
            st.error(f"‚ùå Erro ao acessar o TradingView: {response.status_code}")
            return []
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes: {str(e)}")
        return []

def buscar_acoes_brasileiras():
    """
    Busca todas as a√ß√µes brasileiras usando a API do Yahoo Finance
    """
    try:
        # Lista de √≠ndices brasileiros para buscar a√ß√µes
        indices = ['^BVSP', '^IBXX']  # Bovespa e IBXX
        
        todas_acoes = []
        for indice in indices:
            ticker = yf.Ticker(indice)
            # Buscar componentes do √≠ndice
            componentes = ticker.info.get('components', [])
            if componentes:
                for componente in componentes:
                    if isinstance(componente, str) and componente.endswith('.SA'):
                        codigo = componente.replace('.SA', '')
                        try:
                            info = yf.Ticker(componente).info
                            nome = info.get('longName', codigo)
                            todas_acoes.append({
                                "Codigo": codigo,
                                "Nome": nome
                            })
                        except:
                            continue
        
        if todas_acoes:
            # Atualizar a lista global de ativos
            global ATIVOS_B3
            ATIVOS_B3 = todas_acoes
            return todas_acoes
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a√ß√µes brasileiras.")
            return []
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes brasileiras: {str(e)}")
        return []

def adicionar_acao_manual():
    """
    Permite que o usu√°rio adicione uma a√ß√£o manualmente
    """
    st.subheader("‚ûï Adicionar Nova A√ß√£o")
    
    col1, col2 = st.columns(2)
    with col1:
        codigo = st.text_input("C√≥digo da a√ß√£o (ex: PETR4):").strip().upper()
    with col2:
        nome = st.text_input("Nome da empresa:").strip()
    
    if st.button("Adicionar"):
        if codigo and nome:
            try:
                # Verificar se a a√ß√£o existe no Yahoo Finance
                ticker = yf.Ticker(f"{codigo}.SA")
                info = ticker.info
                
                if info:
                    # Adicionar √† lista global
                    global ATIVOS_B3
                    nova_acao = {
                        "Codigo": codigo,
                        "Nome": nome
                    }
                    ATIVOS_B3.append(nova_acao)
                    st.success(f"‚úÖ A√ß√£o {codigo} adicionada com sucesso!")
                else:
                    st.error("‚ùå A√ß√£o n√£o encontrada no Yahoo Finance.")
            except Exception as e:
                st.error(f"‚ùå Erro ao adicionar a√ß√£o: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Preencha todos os campos.")

# App Streamlit
st.title("üìà Avaliador de A√ß√µes e FIIs")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    perfil = st.selectbox(
        'Qual seu perfil de investimento?',
        [
            'Neutro',
            'Crescimento (busca valoriza√ß√£o)',
            'Dividendos (busca renda passiva)',
            'Curto prazo',
            'M√©dio prazo',
            'Longo prazo',
            'Baixa toler√¢ncia a risco',
            'Alta toler√¢ncia a risco'
        ]
    )
    
    st.markdown("---")
    st.markdown("### üìö Guia R√°pido")
    with st.expander("Como analisar uma a√ß√£o ou FII?"):
        st.markdown("""
        **1. An√°lise Fundamentalista**  
        - Lucro e crescimento
        - Valuation
        - Endividamento
        - Governan√ßa
        
        **2. An√°lise T√©cnica**  
        - Tend√™ncias
        - Volume
        - Indicadores
        
        **3. An√°lise Setorial**  
        - Setor
        - Economia
        - Riscos
        """)

    # Adicionar bot√£o para buscar a√ß√µes do TradingView
    if st.button("üîÑ Atualizar Lista de A√ß√µes"):
        with st.spinner('Buscando a√ß√µes brasileiras...'):
            acoes = buscar_acoes_brasileiras()
            if acoes:
                st.success(f"‚úÖ {len(acoes)} a√ß√µes encontradas!")
            else:
                st.info("‚ÑπÔ∏è Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")

    # Adicionar se√ß√£o para adicionar a√ß√µes manualmente na sidebar
    st.markdown("---")
    with st.expander("‚ûï Adicionar A√ß√£o Manualmente"):
        adicionar_acao_manual()

# √Årea principal
col1, col2 = st.columns([2, 1])
with col1:
    nome_empresa = st.text_input("üîç Nome da empresa ou fundo:")
    df_ativos = carregar_ativos_b3()
    codigo_sugerido = ""
    if not df_ativos.empty and nome_empresa:
        codigo_sugerido = buscar_codigo_por_nome(nome_empresa, df_ativos)

with col2:
    if codigo_sugerido:
        st.info(f"üí° C√≥digo sugerido: {codigo_sugerido}")
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:", value=codigo_sugerido)
    else:
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:")

if st.button("üîç Analisar"):
    try:
        with st.spinner('Carregando dados...'):
            info, historico = obter_dados(codigo)
            
            # Criar abas para organizar as informa√ß√µes
            tab1, tab2, tab3, tab4 = st.tabs([
                "üìä Dados Fundamentais",
                "üìà Gr√°fico e An√°lise Temporal",
                "üåê An√°lise Setorial",
                "üìå Recomenda√ß√µes"
            ])
            
            with tab1:
                mostrar_dados_fundamentais(info)
            
            with tab2:
                mostrar_grafico(historico)
                analise_temporal(historico)
            
            with tab3:
                analise_setorial_noticias(info, codigo)
            
            with tab4:
                analise_sugestiva(info, perfil)
                
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar dados: {str(e)}")
        st.info("üí° Dica: Verifique se o c√≥digo da a√ß√£o/FII est√° correto e tente novamente.")
