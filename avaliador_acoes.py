# Requisitos: Instale com 'pip install yfinance streamlit pandas matplotlib requests beautifulsoup4'

import yfinance as yf
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, date # Importar date
import unicodedata
import os
import requests
from bs4 import BeautifulSoup
import io
import math

# Tentar importar o Selenium, se n√£o estiver dispon√≠vel, usar alternativa
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    import time
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Avaliador de A√ß√µes e FIIs",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Lista simplificada de a√ß√µes e FIIs (adicione mais conforme desejar)
ATIVOS_B3 = [
    # Bancos
    {"Codigo": "ITUB4", "Nome": "Ita√∫ Unibanco"},
    {"Codigo": "BBDC4", "Nome": "Bradesco"},
    {"Codigo": "BBAS3", "Nome": "Banco do Brasil"},
    {"Codigo": "SANB11", "Nome": "Santander"},
    {"Codigo": "BPAC11", "Nome": "BTG Pactual"},
    {"Codigo": "BRSR6", "Nome": "Banco do Estado do Rio Grande do Sul"},
    {"Codigo": "BIDI4", "Nome": "Banco Inter"},
    {"Codigo": "BIDI11", "Nome": "Banco Inter"},
    {"Codigo": "CASH3", "Nome": "M√©liuz"},
    {"Codigo": "CARD3", "Nome": "CSU CardSystem"},
    {"Codigo": "CIEL3", "Nome": "Cielo"},
    {"Codigo": "PAGS", "Nome": "PagSeguro"},
    {"Codigo": "STOC31", "Nome": "StoneCo"},
    
    # Commodities e energia
    {"Codigo": "VALE3", "Nome": "Vale"},
    {"Codigo": "PETR4", "Nome": "Petrobras PN"},
    {"Codigo": "PETR3", "Nome": "Petrobras ON"},
    {"Codigo": "SUZB3", "Nome": "Suzano"},
    {"Codigo": "CSNA3", "Nome": "CSN"},
    {"Codigo": "GGBR4", "Nome": "Gerdau"},
    {"Codigo": "USIM5", "Nome": "Usiminas"},
    {"Codigo": "JBSS3", "Nome": "JBS"},
    {"Codigo": "BRFS3", "Nome": "BRF"},
    {"Codigo": "CMIN3", "Nome": "CSN Minera√ß√£o"},
    {"Codigo": "KLBN4", "Nome": "Klabin"},
    {"Codigo": "NATU3", "Nome": "Natura"},
    {"Codigo": "PRIO3", "Nome": "PetroRio"},
    {"Codigo": "RADL3", "Nome": "Raia Drogasil"},
    {"Codigo": "RENT3", "Nome": "Localiza"},
    {"Codigo": "TOTS3", "Nome": "TOTVS"},
    {"Codigo": "WEGE3", "Nome": "WEG"},
    
    # El√©tricas
    {"Codigo": "ELET3", "Nome": "Eletrobras ON"},
    {"Codigo": "ELET6", "Nome": "Eletrobras PNB"},
    {"Codigo": "ENBR3", "Nome": "EDP Brasil"},
    {"Codigo": "CMIG4", "Nome": "Cemig"},
    {"Codigo": "CPLE6", "Nome": "Copel"},
    {"Codigo": "TAEE11", "Nome": "Taesa"},
    {"Codigo": "ENGI11", "Nome": "Engie Brasil"},
    {"Codigo": "EQTL3", "Nome": "Equatorial"},
    {"Codigo": "EGIE3", "Nome": "Engie Brasil Energia"},
    {"Codigo": "NEOE3", "Nome": "Neoenergia"},
    {"Codigo": "TRPL4", "Nome": "Transmiss√£o Paulista"},
    
    # Varejo e consumo
    {"Codigo": "MGLU3", "Nome": "Magazine Luiza"},
    {"Codigo": "VIIA3", "Nome": "Via"},
    {"Codigo": "LREN3", "Nome": "Lojas Renner"},
    {"Codigo": "AMER3", "Nome": "Americanas"},
    {"Codigo": "RAIL3", "Nome": "Rumo"},
    {"Codigo": "ABEV3", "Nome": "Ambev"},
    {"Codigo": "B3SA3", "Nome": "B3"},
    {"Codigo": "CYRE3", "Nome": "Cyrela"},
    {"Codigo": "EZTC3", "Nome": "EZTEC"},
    {"Codigo": "MRVE3", "Nome": "MRV"},
    {"Codigo": "BRML3", "Nome": "BR Malls"},
    {"Codigo": "MULT3", "Nome": "Multiplan"},
    {"Codigo": "HYPE3", "Nome": "Hypera"},
    {"Codigo": "SULA11", "Nome": "SulAm√©rica"},
    {"Codigo": "VVAR3", "Nome": "Via Varejo"},
    {"Codigo": "CVCB3", "Nome": "CVC Brasil"},
    {"Codigo": "GRND3", "Nome": "Grendene"},
    {"Codigo": "HAPV3", "Nome": "Hapvida"},
    {"Codigo": "LWSA3", "Nome": "Locaweb"},
    {"Codigo": "MELI", "Nome": "Mercado Livre"},
    {"Codigo": "NTCO3", "Nome": "Natura & Co"},
    {"Codigo": "QUAL3", "Nome": "Qualicorp"},
    {"Codigo": "SOMA3", "Nome": "Grupo Soma"},
    {"Codigo": "TIMS3", "Nome": "TIM"},
    {"Codigo": "VIVT3", "Nome": "Telef√¥nica Brasil"},
    
    # FIIs populares
    {"Codigo": "HGLG11", "Nome": "CSHG Log√≠stica FII"},
    {"Codigo": "MXRF11", "Nome": "Maxi Renda FII"},
    {"Codigo": "KNRI11", "Nome": "Kinea Renda Imobili√°ria FII"},
    {"Codigo": "VISC11", "Nome": "Vinci Shopping Centers FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "HGBS11", "Nome": "CSHG Brasil Shopping FII"},
    {"Codigo": "BCFF11", "Nome": "BTG Pactual Fundo de Fundos FII"},
    {"Codigo": "VILG11", "Nome": "Vinci Log√≠stica FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "RECT11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RBRF11", "Nome": "RBR Alpha FII"},
    {"Codigo": "BBPO11", "Nome": "BB Progressivo II FII"},
    {"Codigo": "BRCR11", "Nome": "BTG Pactual Corporate Office Fund FII"},
    {"Codigo": "PLCR11", "Nome": "Plaza FII"},
    {"Codigo": "SHPH11", "Nome": "Shopping P√°tio Higien√≥polis FII"},
    {"Codigo": "ALZR11", "Nome": "Alianza Trust Renda Imobili√°ria FII"},
    {"Codigo": "ARCT11", "Nome": "Arctium Real Estate FII"},
    {"Codigo": "ARRI11", "Nome": "√Åtrio Reit Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "BARI11", "Nome": "Barigui Rendimentos Imobili√°rios FII"},
    {"Codigo": "BCRI11", "Nome": "BTG Pactual Cr√©dito Imobili√°rio FII"},
    {"Codigo": "BTLG11", "Nome": "BTG Pactual Log√≠stica FII"},
    {"Codigo": "CARE11", "Nome": "Mau√° Capital Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "DEVA11", "Nome": "Devant Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "FIIB11", "Nome": "Kinea √çndice de Pre√ßos FII"},
    {"Codigo": "FLMA11", "Nome": "FLMA Cr√©dito Imobili√°rio FII"},
    {"Codigo": "GGRC11", "Nome": "GGR Covepi FII"},
    {"Codigo": "HGCR11", "Nome": "CSHG Cr√©dito Imobili√°rio FII"},
    {"Codigo": "HGRU11", "Nome": "CSHG Renda Urbana FII"},
    {"Codigo": "HSAF11", "Nome": "Hsi Malls Fundo de Investimento Imobili√°rio"},
    {"Codigo": "IRDM11", "Nome": "Iridium Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "JSRE11", "Nome": "JS Real Estate Multigest√£o FII"},
    {"Codigo": "KFOF11", "Nome": "Kinea FoF FII"},
    {"Codigo": "KNSC11", "Nome": "Kinea Securities FII"},
    {"Codigo": "MALL11", "Nome": "Malls Brasil Plural FII"},
    {"Codigo": "MGFF11", "Nome": "Mogno Fundo de Investimento Imobili√°rio"},
    {"Codigo": "MORE11", "Nome": "More Real Estate FII"},
    {"Codigo": "NEWL11", "Nome": "Newport Log√≠stica FII"},
    {"Codigo": "PVBI11", "Nome": "VBI Prime Properties FII"},
    {"Codigo": "RBVA11", "Nome": "Rio Bravo Renda Varejo FII"},
    {"Codigo": "RBVO11", "Nome": "Rio Bravo Renda Varejo FII"},
    {"Codigo": "RCRB11", "Nome": "Rio Bravo Cr√©dito Imobili√°rio FII"},
    {"Codigo": "RCRI11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RZAK11", "Nome": "Riza Akin FII"},
    {"Codigo": "SNCI11", "Nome": "Suno Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "TEPP11", "Nome": "Tellus Properties FII"},
    {"Codigo": "TRXF11", "Nome": "TRX Real Estate FII"},
    {"Codigo": "URPR11", "Nome": "Urca Prime Renda FII"},
    {"Codigo": "VERE11", "Nome": "V√©rtice Renda Imobili√°ria FII"},
    {"Codigo": "VIFI11", "Nome": "Vinci Imobili√°rio FII"},
    {"Codigo": "VINO11", "Nome": "Vinci Offices FII"},
    {"Codigo": "VSLH11", "Nome": "Vinci Shopping FII"},
    {"Codigo": "XPCI11", "Nome": "XP Cr√©dito Imobili√°rio FII"},
    {"Codigo": "XPIN11", "Nome": "XP Industrial FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "XPPR11", "Nome": "XP Properties FII"}
]

def carregar_ativos_b3():
    df = pd.DataFrame(ATIVOS_B3)
    df['NomeBusca'] = df['Nome'].str.lower().apply(lambda x: unicodedata.normalize('NFKD', str(x)).encode('ascii', errors='ignore').decode('utf-8'))
    df['CodigoBusca'] = df['Codigo'].str.lower()
    return df

def buscar_codigo_por_nome(nome, df_ativos):
    if df_ativos.empty:
        return None
    nome = nome.strip().lower()
    nome = unicodedata.normalize('NFKD', nome).encode('ascii', errors='ignore').decode('utf-8')
    resultados = df_ativos[df_ativos['NomeBusca'].str.contains(nome)]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    resultados = df_ativos[df_ativos['CodigoBusca'] == nome]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    return None

def formatar_codigo_acao(codigo):
    """
    Formata o c√≥digo da a√ß√£o/FII para o padr√£o do Yahoo Finance
    """
    try:
        # Remover espa√ßos e converter para mai√∫sculas
        codigo = codigo.strip().upper()
        
        # Verificar se o c√≥digo j√° termina com .SA
        if not codigo.endswith('.SA'):
            codigo = f"{codigo}.SA"
            
        return codigo
    except Exception as e:
        st.error(f"‚ùå Erro ao formatar c√≥digo: {str(e)}")
        return codigo

def obter_dados(codigo):
    try:
        codigo_formatado = formatar_codigo_acao(codigo)
        acao = yf.Ticker(codigo_formatado)
        
        # Verificar se o ativo existe
        try:
            info = acao.info
            if not info:
                st.error(f"‚ùå Ativo {codigo} n√£o encontrado.")
                return None, None
        except Exception as e:
            st.error(f"‚ùå Erro ao obter informa√ß√µes do ativo {codigo}: {str(e)}")
            return None, None
            
        # Obter hist√≥rico com tratamento de erro
        try:
            historico = acao.history(period="1y")
            if historico.empty:
                st.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel obter hist√≥rico para {codigo}.")
                return info, None
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao obter hist√≥rico para {codigo}: {str(e)}")
            return info, None

        return info, historico
        
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar dados: {str(e)}")
        st.info("üí° Dica: Verifique se o c√≥digo da a√ß√£o/FII est√° correto e tente novamente.")
        return None, None

def mostrar_dados_fundamentais(info):
    if info is None:
        st.warning("‚ö†Ô∏è N√£o h√° dados fundamentais dispon√≠veis para este ativo.")
        return
        
    st.subheader("üìä Dados Fundamentais")
    
    # Criar colunas para os dados fundamentais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Informa√ß√µes B√°sicas")
        with st.container():
            try:
                st.write(f"**Empresa/FII:** {info.get('longName', 'N/A')}")
                st.write(f"**Setor:** {info.get('sector', 'N/A')}")
                preco = info.get('previousClose')
                if preco is not None:
                    st.write(f"**Pre√ßo atual:** R$ {float(preco):.2f}")
                else:
                    st.write("**Pre√ßo atual:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar informa√ß√µes b√°sicas: {str(e)}")
        
        st.markdown("### Indicadores de Valuation")
        with st.container():
            try:
                pl = info.get('trailingPE')
                if pl is not None:
                    st.write(f"**P/L:** {float(pl):.2f} *<small>(Pre√ßo/Lucro)</small>*", unsafe_allow_html=True)
                else:
                    st.write("**P/L:** N/A")
                    
                p_vpa = info.get('priceToBook')
                if p_vpa is not None:
                    st.write(f"**P/VPA:** {float(p_vpa):.2f} *<small>(Pre√ßo/Valor Patrimonial)</small>*", unsafe_allow_html=True)
                else:
                    st.write("**P/VPA:** N/A")
                    
                ev_ebitda = info.get('enterpriseToEbitda')
                if ev_ebitda is not None:
                    st.write(f"**EV/EBITDA:** {float(ev_ebitda):.2f} *<small>(Valor da Empresa/EBITDA)</small>*", unsafe_allow_html=True)
                else:
                    st.write("**EV/EBITDA:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar indicadores de valuation: {str(e)}")
    
    with col2:
        st.markdown("### Indicadores de Rentabilidade")
        with st.container():
            try:
                dy = info.get('dividendYield')
                if dy is not None:
                    st.write(f"**Dividend Yield:** {float(dy) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**Dividend Yield:** N/A")
                    
                roe = info.get('returnOnEquity')
                if roe is not None:
                    st.write(f"**ROE:** {float(roe) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**ROE:** N/A")
                    
                margem_bruta = info.get('grossMargins')
                if margem_bruta is not None:
                    st.write(f"**Margem Bruta:** {float(margem_bruta) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**Margem Bruta:** N/A")
                    
                margem_liquida = info.get('profitMargins')
                if margem_liquida is not None:
                    st.write(f"**Margem L√≠quida:** {float(margem_liquida) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**Margem L√≠quida:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar indicadores de rentabilidade: {str(e)}")
        
        st.markdown("### Mais Indicadores de Rentabilidade")
        with st.container():
            try:
                margem_ebitda = info.get('ebitdaMargins')
                if margem_ebitda is not None:
                    st.write(f"**Margem EBITDA:** {float(margem_ebitda) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**Margem EBITDA:** N/A")
                    
                margem_operacional = info.get('operatingMargins')
                if margem_operacional is not None:
                    st.write(f"**Margem Operacional:** {float(margem_operacional) * 100:.2f}%", unsafe_allow_html=True)
                else:
                    st.write("**Margem Operacional:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar indicadores adicionais: {str(e)}")

        st.markdown("### Indicadores de Endividamento")
        with st.container():
            try:
                debt_ebitda = info.get('debtToEbitda')
                if debt_ebitda is not None:
                    st.write(f"**D√≠vida L√≠quida/EBITDA:** {float(debt_ebitda):.2f}")
                else:
                    st.write("**D√≠vida L√≠quida/EBITDA:** N/A")
                    
                debt_equity = info.get('debtToEquity')
                if debt_equity is not None:
                    st.write(f"**D√≠vida/Patrim√¥nio L√≠quido:** {float(debt_equity):.2f}")
                else:
                    st.write("**D√≠vida/Patrim√¥nio L√≠quido:** N/A")
                    
                liquidez = info.get('currentRatio')
                if liquidez is not None:
                    st.write(f"**Liquidez Corrente:** {float(liquidez):.2f}")
                else:
                    st.write("**Liquidez Corrente:** N/A")
                    
                caixa = info.get('totalCash')
                if caixa is not None:
                    st.write(f"**Caixa Total:** R$ {float(caixa):,.2f}")
                else:
                    st.write("**Caixa Total:** N/A")
                    
                divida = info.get('totalDebt')
                if divida is not None:
                    st.write(f"**D√≠vida Total:** R$ {float(divida):,.2f}")
                else:
                    st.write("**D√≠vida Total:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar indicadores de endividamento: {str(e)}")

        st.markdown("### Indicadores de Fluxo de Caixa")
        with st.container():
            try:
                fco = info.get('operatingCashflow')
                if fco is not None:
                    st.write(f"**Fluxo de Caixa Operacional:** R$ {float(fco):,.2f}")
                else:
                    st.write("**Fluxo de Caixa Operacional:** N/A")
                    
                fcl = info.get('freeCashflow')
                if fcl is not None:
                    st.write(f"**Fluxo de Caixa Livre:** R$ {float(fcl):,.2f}")
                else:
                    st.write("**Fluxo de Caixa Livre:** N/A")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Erro ao mostrar indicadores de fluxo de caixa: {str(e)}")

def mostrar_grafico(historico):
    st.subheader("üìà Tend√™ncia de Pre√ßo")
    fig, ax = plt.subplots(figsize=(12, 6))
    historico['Close'].plot(ax=ax, color='#2196F3', linewidth=2)
    ax.set_ylabel("Pre√ßo de Fechamento (R$)")
    ax.set_xlabel("Data")
    ax.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(rotation=45)
    st.pyplot(fig)

def mostrar_indicadores_historicos(acao):
    st.subheader("üìä Evolu√ß√£o dos Indicadores")
    
    try:
        # Obter dados hist√≥ricos dos indicadores com tratamento de erro
        try:
            historico_indicadores = acao.history(period="5y")
            if historico_indicadores.empty:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter dados hist√≥ricos para este per√≠odo.")
                return
        except Exception as e:
            st.warning(f"‚ö†Ô∏è Erro ao obter hist√≥rico: {str(e)}")
            return
        
        # Criar colunas para os gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de P/L Hist√≥rico
            try:
                if 'trailingPE' in acao.info and acao.info['trailingPE'] is not None:
                    st.markdown("### P/L Hist√≥rico")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Calcular P/L hist√≥rico usando pre√ßo e lucro por a√ß√£o
                    if 'earningsPerShare' in acao.info and acao.info['earningsPerShare'] is not None and acao.info['earningsPerShare'] > 0:
                        pl_historico = historico_indicadores['Close'] / acao.info['earningsPerShare']
                        pl_historico.plot(ax=ax, color='#4CAF50', linewidth=2)
                        ax.set_ylabel("P/L")
                        ax.grid(True, linestyle='--', alpha=0.7)
                        st.pyplot(fig)
                    else:
                        st.info("‚ÑπÔ∏è Dados de LPA n√£o dispon√≠veis para c√°lculo do P/L hist√≥rico.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de P/L hist√≥rico.")
            
            # Gr√°fico de Dividend Yield Hist√≥rico
            try:
                if not historico_indicadores['Dividends'].empty:
                    st.markdown("### Dividend Yield Hist√≥rico")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Calcular DY hist√≥rico
                    dy_historico = (historico_indicadores['Dividends'] / historico_indicadores['Close']) * 100
                    dy_historico.plot(ax=ax, color='#FF9800', linewidth=2)
                    ax.set_ylabel("Dividend Yield (%)")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    st.pyplot(fig)
                else:
                    st.info("‚ÑπÔ∏è Dados de dividendos n√£o dispon√≠veis para este per√≠odo.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de Dividend Yield hist√≥rico.")
        
        with col2:
            # Gr√°fico de ROE Hist√≥rico
            try:
                if 'returnOnEquity' in acao.info and acao.info['returnOnEquity'] is not None:
                    st.markdown("### ROE Hist√≥rico")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Usar ROE atual como refer√™ncia
                    roe_atual = acao.info['returnOnEquity'] * 100
                    ax.axhline(y=roe_atual, color='#9C27B0', linestyle='-', label=f'ROE Atual: {roe_atual:.2f}%')
                    ax.set_ylabel("ROE (%)")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    ax.legend()
                    st.pyplot(fig)
                else:
                    st.info("‚ÑπÔ∏è Dados de ROE n√£o dispon√≠veis.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de ROE hist√≥rico.")
            
            # Gr√°fico de Margem EBITDA Hist√≥rica
            try:
                if 'ebitdaMargins' in acao.info and acao.info['ebitdaMargins'] is not None:
                    st.markdown("### Margem EBITDA Hist√≥rica")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Usar margem EBITDA atual como refer√™ncia
                    margem_atual = acao.info['ebitdaMargins'] * 100
                    ax.axhline(y=margem_atual, color='#E91E63', linestyle='-', label=f'Margem Atual: {margem_atual:.2f}%')
                    ax.set_ylabel("Margem EBITDA (%)")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    ax.legend()
                    st.pyplot(fig)
                else:
                    st.info("‚ÑπÔ∏è Dados de Margem EBITDA n√£o dispon√≠veis.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de Margem EBITDA hist√≥rica.")
        
        # Adicionar mais indicadores em uma nova linha
        col3, col4 = st.columns(2)
        
        with col3:
            # Gr√°fico de D√≠vida/PL Hist√≥rico
            try:
                if 'debtToEquity' in acao.info and acao.info['debtToEquity'] is not None:
                    st.markdown("### D√≠vida/PL Hist√≥rico")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Usar D√≠vida/PL atual como refer√™ncia
                    debt_equity_atual = acao.info['debtToEquity']
                    ax.axhline(y=debt_equity_atual, color='#F44336', linestyle='-', label=f'D√≠vida/PL Atual: {debt_equity_atual:.2f}')
                    ax.set_ylabel("D√≠vida/PL")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    ax.legend()
                    st.pyplot(fig)
                else:
                    st.info("‚ÑπÔ∏è Dados de D√≠vida/PL n√£o dispon√≠veis.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de D√≠vida/PL hist√≥rico.")
        
        with col4:
            # Gr√°fico de P/VPA Hist√≥rico
            try:
                if 'priceToBook' in acao.info and acao.info['priceToBook'] is not None:
                    st.markdown("### P/VPA Hist√≥rico")
                    fig, ax = plt.subplots(figsize=(10, 4))
                    # Calcular P/VPA hist√≥rico usando pre√ßo e VPA
                    if 'bookValue' in acao.info and acao.info['bookValue'] is not None and acao.info['bookValue'] > 0:
                        pvpa_historico = historico_indicadores['Close'] / acao.info['bookValue']
                        pvpa_historico.plot(ax=ax, color='#3F51B5', linewidth=2)
                        ax.set_ylabel("P/VPA")
                        ax.grid(True, linestyle='--', alpha=0.7)
                        st.pyplot(fig)
                    else:
                        st.info("‚ÑπÔ∏è Dados de VPA n√£o dispon√≠veis para c√°lculo do P/VPA hist√≥rico.")
            except Exception as e:
                st.info("‚ÑπÔ∏è N√£o foi poss√≠vel gerar o gr√°fico de P/VPA hist√≥rico.")
        
        # Adicionar nota explicativa
        st.info("""
        **Nota:** Alguns indicadores mostram apenas o valor atual como refer√™ncia (linha horizontal) 
        devido √† limita√ß√£o de dados hist√≥ricos dispon√≠veis no Yahoo Finance. 
        Os gr√°ficos de P/L, Dividend Yield e P/VPA mostram a evolu√ß√£o hist√≥rica quando os dados est√£o dispon√≠veis.
        """)
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erro ao gerar os gr√°ficos de indicadores hist√≥ricos: {str(e)}")
        st.info("""
        üí° Dicas:
        1. Verifique se o ativo est√° listado corretamente
        2. Alguns indicadores podem n√£o estar dispon√≠veis para este ativo
        3. Tente novamente em alguns minutos
        4. Para FIIs, alguns indicadores podem n√£o ser aplic√°veis
        """)

def analise_temporal(historico):
    st.subheader("‚è±Ô∏è An√°lise Temporal")
    historico.index = historico.index.tz_localize(None)
    tres_meses_atras = datetime.now() - timedelta(days=90)
    dados_3m = historico[historico.index >= tres_meses_atras]
    variacao_3m = ((dados_3m['Close'].iloc[-1] / dados_3m['Close'].iloc[0]) - 1) * 100 if not dados_3m.empty else 0
    seis_meses_atras = datetime.now() - timedelta(days=180)
    dados_6m = historico[historico.index >= seis_meses_atras]
    variacao_6m = ((dados_6m['Close'].iloc[-1] / dados_6m['Close'].iloc[0]) - 1) * 100 if not dados_6m.empty else 0
    variacao_1a = ((historico['Close'].iloc[-1] / historico['Close'].iloc[0]) - 1) * 100 if not historico.empty else 0
    
    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 3 meses")
            st.metric(label="", value=f"{variacao_3m:.2f}%")
    with col2:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 6 meses")
            st.metric(label="", value=f"{variacao_6m:.2f}%")
    with col3:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 1 ano")
            st.metric(label="", value=f"{variacao_1a:.2f}%")

# ====== NOVO: An√°lise Setorial e Not√≠cias ======
def analise_setorial_noticias(info, codigo_acao):
    st.subheader("üåê An√°lise Setorial e Not√≠cias")
    setor = info.get('sector', 'N/A')
    explicacao = {
        'Financial Services': 'Setor financeiro tende a ser resiliente, mas sens√≠vel a juros. Inclui bancos, seguradoras e servi√ßos de investimento.',
        'Energy': 'Setor de energia pode ser c√≠clico e sens√≠vel a commodities e geopol√≠tica. Inclui petr√≥leo, g√°s e energias renov√°veis.',
        'Utilities': 'Setor de utilidade p√∫blica costuma ser defensivo e regulado. Inclui empresas de energia el√©trica, √°gua e g√°s.',
        'Real Estate': 'Setor imobili√°rio √© sens√≠vel a juros, infla√ß√£o e ciclos econ√¥micos. Inclui construtoras, incorporadoras e fundos imobili√°rios (FIIs).',
        'Consumer Defensive': 'Setor defensivo, menos sens√≠vel a crises econ√¥micas. Inclui alimentos, bebidas, produtos dom√©sticos e higiene.',
        'Basic Materials': 'Setor de commodities √© c√≠clico e depende do mercado global e pre√ßos das mat√©rias-primas. Inclui minera√ß√£o, siderurgia, papel e celulose.',
        'Industrials': 'Setor industrial depende do crescimento econ√¥mico e investimento em infraestrutura. Inclui bens de capital, transporte e servi√ßos industriais.',
        'Healthcare': 'Setor de sa√∫de tende a ser resiliente. Inclui hospitais, laborat√≥rios e farmac√™uticas.',
        'Technology': 'Setor de tecnologia pode ter alto crescimento, mas tamb√©m volatilidade. Inclui software, hardware e servi√ßos de TI.',
        'Consumer Cyclical': 'Setor c√≠clico, sens√≠vel ao consumo e renda dispon√≠vel. Inclui varejo (n√£o defensivo), viagens e lazer.',
        'Communication Services': 'Setor de servi√ßos de comunica√ß√£o. Inclui telecomunica√ß√µes e m√≠dia.',
        'N/A': 'Setor n√£o informado.'
    }
    st.write(f"**Setor:** **{setor}**")
    st.info(explicacao.get(setor, 'Setor n√£o identificado ou sem explica√ß√£o detalhada dispon√≠vel.'))
    st.markdown("---")
    
    st.markdown("### üì∞ Not√≠cias Recentes")
    try:
        with st.spinner('Buscando not√≠cias recentes...'):
            ticker_obj = yf.Ticker(codigo_acao)
            noticias = ticker_obj.news
            
            if noticias:
                for n in noticias[:5]: # Exibir as 5 not√≠cias mais recentes
                    with st.container(): # Cada not√≠cia em um container
                        st.markdown(f"**[{n['title']}]({n['link']})**") # T√≠tulo clic√°vel
                        
                        # Formatar a data
                        try:
                            data = datetime.fromtimestamp(n['providerPublishTime'])
                            data_formatada = data.strftime('%d/%m/%Y %H:%M')
                        except:
                            data_formatada = "Data n√£o dispon√≠vel"
                        
                        # Exibir fonte e data
                        st.markdown(f"*Fonte: {n.get('publisher', 'Fonte n√£o dispon√≠vel')} - {data_formatada}* <br>", unsafe_allow_html=True)
                        
            else:
                st.info("Nenhuma not√≠cia recente encontrada para este ativo.")
                
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel buscar not√≠cias: {str(e)}")
        st.info("Dica: Alguns ativos podem n√£o ter not√≠cias dispon√≠veis ou podem estar com acesso temporariamente indispon√≠vel.")

# ====== MELHORIA: Recomenda√ß√µes personalizadas ======
def analise_sugestiva(info, perfil):
    st.subheader("üìå Recomenda√ß√µes por Horizonte de Investimento e Perfil")
    
    # Definir pesos por perfil
    pesos = {
        'Crescimento (busca valoriza√ß√£o)': {
            'roe': 3,
            'pl': 2,
            'crescimento_lucro': 3,
            'margem_ebitda': 2,
            'dividend_yield': 1,
            'divida_ebitda': 2,
            'liquidez': 1
        },
        'Dividendos (busca renda passiva)': {
            'dividend_yield': 3,
            'payout': 2,
            'divida_ebitda': 2,
            'liquidez': 2,
            'roe': 1,
            'pl': 1,
            'crescimento_lucro': 1
        },
        'Baixa toler√¢ncia a risco': {
            'divida_ebitda': 3,
            'liquidez': 3,
            'dividend_yield': 2,
            'margem_ebitda': 2,
            'pl': 1,
            'roe': 1
        },
        'Alta toler√¢ncia a risco': {
            'crescimento_lucro': 3,
            'roe': 2,
            'pl': 2,
            'margem_ebitda': 2,
            'divida_ebitda': 1
        },
        'Neutro': {
            'roe': 2,
            'pl': 2,
            'dividend_yield': 2,
            'divida_ebitda': 2,
            'liquidez': 2
        }
    }

    # Obter indicadores
    pl = info.get('trailingPE')
    dy = info.get('dividendYield')
    roe = info.get('returnOnEquity')
    debt_equity = info.get('debtToEquity')
    price_to_book = info.get('priceToBook')
    ev_ebitda = info.get('enterpriseToEbitda')
    debt_ebitda = info.get('debtToEbitda')
    current_ratio = info.get('currentRatio')
    payout_ratio = info.get('payoutRatio')
    ebitda_margins = info.get('ebitdaMargins')
    operating_margins = info.get('operatingMargins')
    operating_cashflow = info.get('operatingCashflow')
    free_cashflow = info.get('freeCashflow')
    
    # Tentar obter crescimento do lucro (se dispon√≠vel)
    try:
        acao = yf.Ticker(info.get('symbol'))
        historico = acao.history(period="2y")
        if not historico.empty and 'earningsPerShare' in info:
            lpa_atual = info['earningsPerShare']
            lpa_anterior = historico['Close'].iloc[-252] / pl if pl is not None else None
            if lpa_anterior and lpa_anterior > 0:
                crescimento_lucro = (lpa_atual - lpa_anterior) / lpa_anterior
            else:
                crescimento_lucro = None
        else:
            crescimento_lucro = None
    except:
        crescimento_lucro = None

    sugestoes = []
    score = 0
    max_score = 0

    # Obter pesos do perfil selecionado
    perfil_pesos = pesos.get(perfil, pesos['Neutro'])
    
    # An√°lise para perfil de Crescimento
    if 'crescimento' in perfil.lower():
        # ROE
        if roe is not None:
            peso = perfil_pesos['roe']
            max_score += peso * 2
            if roe > 0.15:
                sugestoes.append(f"üìà ROE forte ({roe*100:.1f}%). Excelente para crescimento.")
                score += peso * 2
            elif roe > 0.08:
                sugestoes.append(f"‚úÖ ROE moderado ({roe*100:.1f}%). Aceit√°vel para crescimento.")
                score += peso
            else:
                sugestoes.append(f"‚ö†Ô∏è ROE baixo ({roe*100:.1f}%). Aten√ß√£o para perfil crescimento.")
                score -= peso

        # Crescimento do Lucro
        if crescimento_lucro is not None:
            peso = perfil_pesos['crescimento_lucro']
            max_score += peso * 2
            if crescimento_lucro > 0.15:
                sugestoes.append(f"üìà Crescimento do lucro forte ({crescimento_lucro*100:.1f}%). Muito positivo.")
                score += peso * 2
            elif crescimento_lucro > 0.05:
                sugestoes.append(f"‚úÖ Crescimento do lucro moderado ({crescimento_lucro*100:.1f}%).")
                score += peso
            else:
                sugestoes.append(f"‚ö†Ô∏è Crescimento do lucro baixo ({crescimento_lucro*100:.1f}%).")
                score -= peso

        # P/L
        if pl is not None:
            peso = perfil_pesos['pl']
            max_score += peso
            if pl < 15:
                sugestoes.append(f"‚úÖ P/L razo√°vel ({pl:.1f}). Bom para crescimento.")
                score += peso
            elif pl < 25:
                sugestoes.append(f"‚ÑπÔ∏è P/L moderado ({pl:.1f}).")
                score += peso/2
            else:
                sugestoes.append(f"‚ö†Ô∏è P/L elevado ({pl:.1f}).")
                score -= peso

    # An√°lise para perfil de Dividendos
    if 'dividendos' in perfil.lower():
        # Dividend Yield
        if dy is not None:
            peso = perfil_pesos['dividend_yield']
            max_score += peso * 2
            if dy > 0.06:
                sugestoes.append(f"üí∞ Excelente Dividend Yield ({dy*100:.1f}%).")
                score += peso * 2
            elif dy > 0.04:
                sugestoes.append(f"‚úÖ Bom Dividend Yield ({dy*100:.1f}%).")
                score += peso
            else:
                sugestoes.append(f"‚ö†Ô∏è Dividend Yield baixo ({dy*100:.1f}%).")
                score -= peso

        # Payout
        if payout_ratio is not None:
            peso = perfil_pesos['payout']
            max_score += peso
            if 0.4 <= payout_ratio <= 0.7:
                sugestoes.append(f"‚úÖ Payout saud√°vel ({payout_ratio*100:.1f}%).")
                score += peso
            elif payout_ratio > 0.7:
                sugestoes.append(f"‚ö†Ô∏è Payout elevado ({payout_ratio*100:.1f}%).")
                score -= peso
            else:
                sugestoes.append(f"‚ÑπÔ∏è Payout baixo ({payout_ratio*100:.1f}%).")
                score += peso/2

    # An√°lise para perfil de Baixo Risco
    if 'baixa' in perfil.lower():
        # D√≠vida/EBITDA
        if debt_ebitda is not None:
            peso = perfil_pesos['divida_ebitda']
            max_score += peso * 2
            if debt_ebitda < 2:
                sugestoes.append(f"üí™ D√≠vida/EBITDA baixa ({debt_ebitda:.1f}). Excelente para perfil conservador.")
                score += peso * 2
            elif debt_ebitda < 3.5:
                sugestoes.append(f"‚úÖ D√≠vida/EBITDA moderada ({debt_ebitda:.1f}).")
                score += peso
            else:
                sugestoes.append(f"‚ö†Ô∏è D√≠vida/EBITDA elevada ({debt_ebitda:.1f}).")
                score -= peso

        # Liquidez
        if current_ratio is not None:
            peso = perfil_pesos['liquidez']
            max_score += peso * 2
            if current_ratio > 1.8:
                sugestoes.append(f"üí™ Excelente liquidez ({current_ratio:.1f}).")
                score += peso * 2
            elif current_ratio > 1.2:
                sugestoes.append(f"‚úÖ Boa liquidez ({current_ratio:.1f}).")
                score += peso
            else:
                sugestoes.append(f"‚ö†Ô∏è Liquidez baixa ({current_ratio:.1f}).")
                score -= peso

    # An√°lise para perfil de Alto Risco
    if 'alta' in perfil.lower():
        # Crescimento do Lucro
        if crescimento_lucro is not None:
            peso = perfil_pesos['crescimento_lucro']
            max_score += peso * 2
            if crescimento_lucro > 0.20:
                sugestoes.append(f"üìà Crescimento do lucro muito forte ({crescimento_lucro*100:.1f}%).")
                score += peso * 2
            elif crescimento_lucro > 0.10:
                sugestoes.append(f"‚úÖ Crescimento do lucro bom ({crescimento_lucro*100:.1f}%).")
                score += peso
            else:
                sugestoes.append(f"‚ÑπÔ∏è Crescimento do lucro moderado ({crescimento_lucro*100:.1f}%).")
                score += peso/2

        # ROE
        if roe is not None:
            peso = perfil_pesos['roe']
            max_score += peso
            if roe > 0.20:
                sugestoes.append(f"üìà ROE muito forte ({roe*100:.1f}%).")
                score += peso
            elif roe > 0.15:
                sugestoes.append(f"‚úÖ ROE forte ({roe*100:.1f}%).")
                score += peso/2

    # An√°lise para perfil Neutro
    if 'neutro' in perfil.lower():
        # ROE
        if roe is not None:
            peso = perfil_pesos['roe']
            max_score += peso
            if roe > 0.12:
                sugestoes.append(f"‚úÖ ROE bom ({roe*100:.1f}%).")
                score += peso
            elif roe > 0.08:
                sugestoes.append(f"‚ÑπÔ∏è ROE moderado ({roe*100:.1f}%).")
                score += peso/2

        # P/L
        if pl is not None:
            peso = perfil_pesos['pl']
            max_score += peso
            if 10 <= pl <= 20:
                sugestoes.append(f"‚úÖ P/L adequado ({pl:.1f}).")
                score += peso
            elif 5 <= pl < 10 or 20 < pl <= 25:
                sugestoes.append(f"‚ÑπÔ∏è P/L moderado ({pl:.1f}).")
                score += peso/2
            else:
                sugestoes.append(f"‚ö†Ô∏è P/L fora da faixa ideal ({pl:.1f}).")
                score -= peso

    # An√°lise de Margens (comum a todos os perfis)
    if ebitda_margins is not None:
        peso = perfil_pesos.get('margem_ebitda', 1)
        max_score += peso
        if ebitda_margins > 0.20:
            sugestoes.append(f"üìà Margem EBITDA forte ({ebitda_margins*100:.1f}%).")
            score += peso
        elif ebitda_margins > 0.15:
            sugestoes.append(f"‚úÖ Margem EBITDA boa ({ebitda_margins*100:.1f}%).")
            score += peso/2
        else:
            sugestoes.append(f"‚ÑπÔ∏è Margem EBITDA moderada ({ebitda_margins*100:.1f}%).")
            score += peso/3

    # Calcular score final (0-10)
    if max_score > 0:
        score_final = max(0, min(10, round((score / max_score) * 10)))
    else:
        score_final = 0

    # Exibir resultados
    st.markdown("--- ")
    st.subheader("Sum√°rio e Score Fundamental")
    st.write(f"**Perfil Selecionado:** {perfil}")
    st.write(f"**Score Fundamental (0-10):** **{score_final}/10**")
    
    if score_final >= 8:
        st.success("‚≠ê An√°lise Fundamentalista Forte para o perfil.")
    elif score_final >= 5:
        st.info("‚úÖ An√°lise Fundamentalista Moderada para o perfil.")
    else:
        st.warning("‚ö†Ô∏è An√°lise Fundamentalista Apresenta Pontos de Aten√ß√£o para o perfil.")

    st.markdown("--- ")
    st.subheader("Detalhamento das Sugest√µes:")
    if not sugestoes:
        st.info("Sem alertas ou sugest√µes relevantes com base nos indicadores e perfil selecionado.")
    for s in sugestoes:
        if "üìà" in s or "üí∞" in s or "üí™" in s or "‚úÖ" in s:
            st.success(s)
        elif "‚ö†Ô∏è" in s:
            st.warning(s)
        else:
            st.info(s)

    # Adicionar nota sobre limita√ß√µes
    st.info("""
    **Nota:** Esta an√°lise √© baseada em dados dispon√≠veis no Yahoo Finance e pode n√£o refletir 
    todas as nuances do ativo. Recomenda-se complementar com outras fontes de informa√ß√£o e 
    an√°lise fundamentalista mais detalhada.
    """)

def buscar_acoes_tradingview():
    """
    Busca todas as a√ß√µes listadas no TradingView Screener
    """
    if not SELENIUM_AVAILABLE:
        st.error("‚ùå O m√≥dulo Selenium n√£o est√° dispon√≠vel. Por favor, instale-o usando: pip install selenium webdriver_manager")
        st.info("üí° Alternativa: Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")
        return []
        
    try:
        st.info("üîÑ Iniciando busca de a√ß√µes no TradingView...")
        
        # Configurar o Chrome em modo headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        # Inicializar o driver
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        
        try:
            # Acessar o TradingView Screener
            driver.get("https://br.tradingview.com/screener/")
            
            # Aguardar o carregamento da p√°gina
            time.sleep(5)  # Aguardar carregamento inicial
            
            # Aguardar at√© que a tabela de a√ß√µes seja carregada
            wait = WebDriverWait(driver, 20)
            tabela = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "tv-screener-table")))
            
            # Extrair dados das a√ß√µes
            acoes = []
            linhas = tabela.find_elements(By.TAG_NAME, "tr")
            
            for linha in linhas[1:]:  # Pular o cabe√ßalho
                colunas = linha.find_elements(By.TAG_NAME, "td")
                if len(colunas) >= 2:
                    codigo = colunas[0].text.strip()
                    nome = colunas[1].text.strip()
                    if codigo and nome:
                        acoes.append({
                            "Codigo": codigo,
                            "Nome": nome
                        })
            
            if acoes:
                # Atualizar a lista global de ativos
                global ATIVOS_B3
                ATIVOS_B3 = acoes
                return acoes
            else:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a√ß√µes no TradingView.")
                return []
                
        finally:
            driver.quit()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes no TradingView: {str(e)}")
        st.info("üí° Alternativa: Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")
        return []

def buscar_acoes_brasileiras():
    """
    Busca todas as a√ß√µes brasileiras usando a API do Yahoo Finance
    """
    try:
        # Lista de √≠ndices brasileiros para buscar a√ß√µes
        indices = ['^BVSP', '^IBXX']  # Bovespa e IBXX
        
        todas_acoes = []
        for indice in indices:
            ticker = yf.Ticker(indice)
            # Buscar componentes do √≠ndice
            componentes = ticker.info.get('components', [])
            if componentes:
                for componente in componentes:
                    if isinstance(componente, str) and componente.endswith('.SA'):
                        codigo = componente.replace('.SA', '')
                        try:
                            info = yf.Ticker(componente).info
                            nome = info.get('longName', codigo)
                            todas_acoes.append({
                                "Codigo": codigo,
                                "Nome": nome
                            })
                        except:
                            continue
        
        if todas_acoes:
            # Atualizar a lista global de ativos
            global ATIVOS_B3
            ATIVOS_B3 = todas_acoes
            return todas_acoes
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a√ß√µes brasileiras.")
            return []
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes brasileiras: {str(e)}")
        return []

def adicionar_acao_manual():
    """
    Permite que o usu√°rio adicione uma a√ß√£o manualmente
    """
    st.subheader("‚ûï Adicionar Nova A√ß√£o")
    
    col1, col2 = st.columns(2)
    with col1:
        codigo = st.text_input("C√≥digo da a√ß√£o (ex: PETR4):").strip().upper()
    with col2:
        nome = st.text_input("Nome da empresa:").strip()
    
    if st.button("Adicionar"):
        if codigo and nome:
            try:
                # Verificar se a a√ß√£o existe no Yahoo Finance
                ticker = yf.Ticker(f"{codigo}.SA")
                info = ticker.info
                
                if info:
                    # Adicionar √† lista global
                    global ATIVOS_B3
                    nova_acao = {
                        "Codigo": codigo,
                        "Nome": nome
                    }
                    ATIVOS_B3.append(nova_acao)
                    st.success(f"‚úÖ A√ß√£o {codigo} adicionada com sucesso!")
                else:
                    st.error("‚ùå A√ß√£o n√£o encontrada no Yahoo Finance.")
            except Exception as e:
                st.error(f"‚ùå Erro ao adicionar a√ß√£o: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Preencha todos os campos.")

def calcular_preco_justo_graham(lpa, vpa):
    """
    Calcula o Pre√ßo Justo de Benjamin Graham (f√≥rmula simplificada VI = ‚àö(22,5 x LPA x VPA)).
    Retorna None se os dados necess√°rios n√£o estiverem dispon√≠veis ou forem inv√°lidos.
    """
    if lpa is None or vpa is None or lpa <= 0 or vpa <= 0:
        return None
    try:
        # F√≥rmula simplificada de Graham: VI = sqrt(22.5 * LPA * VPA)
        # Alguns usam um multiplicador de 15x PL e 1.5x P/VPA, cujo produto √© 22.5
        preco_justo = math.sqrt(22.5 * lpa * vpa)
        return preco_justo
    except:
        return None

def calcular_preco_teto_barsi(historico, info, taxa_desejada=0.06):
    """
    Calcula o Pre√ßo Teto de D√©cio Barsi.
    Usa a m√©dia do Dividend Yield dos √∫ltimos 5 anos e a taxa de retorno desejada.
    Retorna None se os dados necess√°rios n√£o estiverem dispon√≠veis ou forem inv√°lidos.
    """
    if historico.empty or info is None:
        return None

    try:
        # Obter hist√≥rico de dividendos e pre√ßos dos √∫ltimos 5 anos
        hoje = datetime.now()
        cinco_anos_atras = hoje - timedelta(days=5*365) # Aproximadamente 5 anos

        # Filtrar hist√≥rico de pre√ßos para os √∫ltimos 5 anos
        historico_5a = historico[historico.index >= cinco_anos_atras]

        if historico_5a.empty:
            return None

        # Calcular o DY anual para cada um dos √∫ltimos 5 anos
        yields_anuais = []
        for ano in range(hoje.year - 4, hoje.year + 1): # √öltimos 5 anos (inclusive o atual incompleto)
            inicio_ano = datetime(ano, 1, 1)
            fim_ano = datetime(ano, 12, 31) if ano < hoje.year else hoje

            historico_ano = historico[(historico.index >= inicio_ano) & (historico.index <= fim_ano)]
            if historico_ano.empty:
                continue

            # Obter dividendos pagos no ano
            # Nota: yfinance .dividends retorna a s√©rie de dividendos, precisamos filtrar pelo per√≠odo
            # Isso pode ser um pouco complexo de alinhar perfeitamente com o hist√≥rico de pre√ßos do per√≠odo.
            # Uma abordagem mais robusta seria pegar os dividendos de todo o per√≠odo e agrup√°-los por ano,
            # e usar o pre√ßo m√©dio ou o pre√ßo final do ano para calcular o yield anual.

            # Simplificando: vamos somar os dividendos pagos no ano e dividir pelo pre√ßo m√©dio do ano
            try:
                acao_temp = yf.Ticker(info.get('symbol'))
                dividendos_periodo = acao_temp.dividends[(acao_temp.dividends.index >= inicio_ano) & (acao_temp.dividends.index <= fim_ano)]
                total_dividendos_ano = dividendos_periodo.sum()
            except:
                total_dividendos_ano = 0 # Nenhum dividendo no ano ou erro

            preco_medio_ano = historico_ano['Close'].mean()

            if preco_medio_ano > 0:
                yield_anual = total_dividendos_ano / preco_medio_ano
                yields_anuais.append(yield_anual)

        if not yields_anuais:
            return None

        media_yields = sum(yields_anuais) / len(yields_anuais)

        if taxa_desejada > 0 and media_yields > 0:
            preco_teto = (media_yields * info.get('previousClose', 0)) / taxa_desejada # Multiplicar pelo pre√ßo atual para ter o valor em R$
            return preco_teto
        else:
            return None
    except Exception as e:
        # st.error(f"Erro no c√°lculo do Pre√ßo Teto: {e}") # Remover em produ√ß√£o
        return None

# App Streamlit
st.title("üìà Avaliador de A√ß√µes e FIIs")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    perfil = st.selectbox(
        'Qual seu perfil de investimento?',
        [
            'Neutro',
            'Crescimento (busca valoriza√ß√£o)',
            'Dividendos (busca renda passiva)',
            'Curto prazo',
            'M√©dio prazo',
            'Longo prazo',
            'Baixa toler√¢ncia a risco',
            'Alta toler√¢ncia a risco'
        ]
    )
    
    st.markdown("---")
    st.markdown("### üìö Guia R√°pido")
    with st.expander("Como analisar uma a√ß√£o ou FII?"):
        st.markdown("""
        **1. An√°lise Fundamentalista**  
        - Lucro e crescimento
        - Valuation
        - Endividamento
        - Governan√ßa
        
        **2. An√°lise T√©cnica**  
        - Tend√™ncias
        - Volume
        - Indicadores
        
        **3. An√°lise Setorial**
        - Setor
        - Economia
        - Riscos
        """)

    # Adicionar se√ß√£o para adicionar a√ß√µes manualmente na sidebar
    st.markdown("---")
    with st.expander("‚ûï Adicionar A√ß√£o Manualmente"):
        adicionar_acao_manual()

# √Årea principal
col1, col2 = st.columns([2, 1])
with col1:
    nome_empresa = st.text_input("üîç Nome da empresa ou fundo:")
    df_ativos = carregar_ativos_b3()
    codigo_sugerido = ""
    if not df_ativos.empty and nome_empresa:
        codigo_sugerido = buscar_codigo_por_nome(nome_empresa, df_ativos)

with col2:
    if codigo_sugerido:
        st.info(f"üí° C√≥digo sugerido: {codigo_sugerido}")
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:", value=codigo_sugerido)
    else:
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:")

if st.button("üîç Analisar"):
    try:
        with st.spinner('Carregando dados...'):
            info, historico = obter_dados(codigo)
            
            # Criar abas para organizar as informa√ß√µes
            tab1, tab2, tab3, tab4, tab5, tab6 = st.tabs([
                "üìä Dados Fundamentais",
                "üìà Gr√°fico e An√°lise Temporal",
                "üåê An√°lise Setorial",
                "üìå Recomenda√ß√µes",
                "üí∞ Valuation Avan√ßado",
                "üìú Demonstra√ß√µes Financeiras Hist√≥ricas"
            ])
            
            with tab1:
                mostrar_dados_fundamentais(info)
            
            with tab2:
                mostrar_grafico(historico)
                analise_temporal(historico)
                mostrar_indicadores_historicos(yf.Ticker(codigo))
            
            with tab3:
                analise_setorial_noticias(info, codigo)
            
            with tab4:
                analise_sugestiva(info, perfil)

            with tab5:
                st.subheader("üí∞ Valuation Avan√ßado")

                # C√°lculo e exibi√ß√£o do Pre√ßo Justo de Graham
                lpa = info.get('earningsPerShare', None)
                vpa = info.get('bookValue', None)
                preco_justo = calcular_preco_justo_graham(lpa, vpa)

                st.markdown("### Pre√ßo Justo de Benjamin Graham (Simplificado)")
                if preco_justo is not None:
                    st.write(f"**Pre√ßo Justo:** R$ {preco_justo:.2f}")
                    preco_atual = info.get('previousClose')
                    if preco_atual is not None:
                        if preco_atual < preco_justo:
                            st.success(f"‚úÖ Pre√ßo atual (R$ {preco_atual:.2f}) est√° ABAIXO do Pre√ßo Justo de Graham.")
                        elif preco_atual > preco_justo:
                            st.warning(f"‚ö†Ô∏è Pre√ßo atual (R$ {preco_atual:.2f}) est√° ACIMA do Pre√ßo Justo de Graham.")
                        else:
                             st.info(f"‚ÑπÔ∏è Pre√ßo atual (R$ {preco_atual:.2f}) √© igual ao Pre√ßo Justo de Graham.")
                else:
                    # Mensagem mais espec√≠fica
                    mensagem_erro_graham = "N√£o foi poss√≠vel calcular o Pre√ßo Justo de Graham. "
                    if lpa is None or lpa <= 0:
                        mensagem_erro_graham += "LPA (Lucro por A√ß√£o) n√£o dispon√≠vel ou inv√°lido. "
                    if vpa is None or vpa <= 0:
                        mensagem_erro_graham += "VPA (Valor Patrimonial por A√ß√£o) n√£o dispon√≠vel ou inv√°lido."
                    if lpa is not None and vpa is not None and lpa > 0 and vpa > 0:
                         mensagem_erro_graham = "Erro no c√°lculo do Pre√ßo Justo de Graham." # Erro inesperado
                    st.info(mensagem_erro_graham.strip())

                st.markdown("--- ")

                # C√°lculo e exibi√ß√£o do Pre√ßo Teto de Barsi
                preco_teto = calcular_preco_teto_barsi(historico, info)

                st.markdown("### Pre√ßo Teto de D√©cio Barsi (Taxa Desejada: 6%)")
                if preco_teto is not None:
                    st.write(f"**Pre√ßo Teto:** R$ {preco_teto:.2f}")
                    preco_atual = info.get('previousClose')
                    if preco_atual is not None:
                        if preco_atual < preco_teto:
                            st.success(f"‚úÖ Pre√ßo atual (R$ {preco_atual:.2f}) est√° ABAIXO do Pre√ßo Teto de Barsi.")
                        elif preco_atual > preco_teto:
                            st.warning(f"‚ö†Ô∏è Pre√ßo atual (R$ {preco_atual:.2f}) est√° ACIMA do Pre√ßo Teto de Barsi.")
                        else:
                            st.info(f"‚ÑπÔ∏è Pre√ßo atual (R$ {preco_atual:.2f}) √© igual ao Pre√ßo Teto de Barsi.")
                else:
                    # Mensagem mais espec√≠fica
                    mensagem_erro_barsi = "N√£o foi poss√≠vel calcular o Pre√ßo Teto de Barsi. "
                    if historico.empty:
                         mensagem_erro_barsi += "Hist√≥rico de pre√ßos n√£o dispon√≠vel. "
                    if info is None:
                         mensagem_erro_barsi += "Informa√ß√µes do ativo n√£o dispon√≠veis. "
                    # A fun√ß√£o calcular_preco_teto_barsi j√° trata a falta de dividendos ou m√©dia zero internamente,
                    # mas podemos adicionar uma nota sobre a depend√™ncia do hist√≥rico de dividendos.
                    mensagem_erro_barsi += "Verifique se o hist√≥rico de dividendos dos √∫ltimos 5 anos est√° dispon√≠vel no Yahoo Finance para este ativo."
                    st.info(mensagem_erro_barsi.strip())
                
            with tab6: # Conte√∫do da nova aba
                st.subheader("üìú Demonstra√ß√µes Financeiras Hist√≥ricas")

                try:
                    # Obter demonstra√ß√µes financeiras
                    acao = yf.Ticker(codigo)
                    financials = acao.financials
                    balance_sheet = acao.balance_sheet
                    cashflow = acao.cashflow

                    # Exibir Income Statement
                    st.markdown("### Demonstrativo de Resultados (Income Statement)")
                    if not financials.empty:
                        # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(financials.T.style.format(precision=2))
                    else:
                        st.info("Demonstrativo de Resultados n√£o dispon√≠vel.")

                    st.markdown("--- ")

                    # Exibir Balan√ßo Patrimonial
                    st.markdown("### Balan√ßo Patrimonial (Balance Sheet)")
                    if not balance_sheet.empty:
                         # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(balance_sheet.T.style.format(precision=2))
                    else:
                        st.info("Balan√ßo Patrimonial n√£o dispon√≠vel.")

                    st.markdown("--- ")

                    # Exibir Fluxo de Caixa
                    st.markdown("### Demonstrativo de Fluxo de Caixa (Cash Flow)")
                    if not cashflow.empty:
                         # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(cashflow.T.style.format(precision=2))
                    else:
                        st.info("Demonstrativo de Fluxo de Caixa n√£o dispon√≠vel.")

                except Exception as e:
                    st.warning(f"N√£o foi poss√≠vel obter ou exibir as demonstra√ß√µes financeiras: {str(e)}")
                    st.info("Verifique se o ativo √© uma a√ß√£o (FIIs geralmente n√£o t√™m demonstra√ß√µes detalhadas no yfinance) ou se os dados est√£o dispon√≠veis para este per√≠odo.")
                
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar dados: {str(e)}")
        st.info("üí° Dica: Verifique se o c√≥digo da a√ß√£o/FII est√° correto e tente novamente.")
