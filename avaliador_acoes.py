# Requisitos: Instale com 'pip install yfinance streamlit pandas matplotlib requests beautifulsoup4'

import yfinance as yf
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from datetime import datetime, timedelta, date # Importar date
import unicodedata
import os
import requests
from bs4 import BeautifulSoup
import io
import math

# Tentar importar o Selenium, se n√£o estiver dispon√≠vel, usar alternativa
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    import time
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Avaliador de A√ß√µes e FIIs",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Lista simplificada de a√ß√µes e FIIs (adicione mais conforme desejar)
ATIVOS_B3 = [
    # Bancos
    {"Codigo": "ITUB4", "Nome": "Ita√∫ Unibanco"},
    {"Codigo": "BBDC4", "Nome": "Bradesco"},
    {"Codigo": "BBAS3", "Nome": "Banco do Brasil"},
    {"Codigo": "SANB11", "Nome": "Santander"},
    {"Codigo": "BPAC11", "Nome": "BTG Pactual"},
    {"Codigo": "BRSR6", "Nome": "Banco do Estado do Rio Grande do Sul"},
    {"Codigo": "BIDI4", "Nome": "Banco Inter"},
    {"Codigo": "BIDI11", "Nome": "Banco Inter"},
    {"Codigo": "CASH3", "Nome": "M√©liuz"},
    {"Codigo": "CARD3", "Nome": "CSU CardSystem"},
    {"Codigo": "CIEL3", "Nome": "Cielo"},
    {"Codigo": "PAGS", "Nome": "PagSeguro"},
    {"Codigo": "STOC31", "Nome": "StoneCo"},
    
    # Commodities e energia
    {"Codigo": "VALE3", "Nome": "Vale"},
    {"Codigo": "PETR4", "Nome": "Petrobras PN"},
    {"Codigo": "PETR3", "Nome": "Petrobras ON"},
    {"Codigo": "SUZB3", "Nome": "Suzano"},
    {"Codigo": "CSNA3", "Nome": "CSN"},
    {"Codigo": "GGBR4", "Nome": "Gerdau"},
    {"Codigo": "USIM5", "Nome": "Usiminas"},
    {"Codigo": "JBSS3", "Nome": "JBS"},
    {"Codigo": "BRFS3", "Nome": "BRF"},
    {"Codigo": "CMIN3", "Nome": "CSN Minera√ß√£o"},
    {"Codigo": "KLBN4", "Nome": "Klabin"},
    {"Codigo": "NATU3", "Nome": "Natura"},
    {"Codigo": "PRIO3", "Nome": "PetroRio"},
    {"Codigo": "RADL3", "Nome": "Raia Drogasil"},
    {"Codigo": "RENT3", "Nome": "Localiza"},
    {"Codigo": "TOTS3", "Nome": "TOTVS"},
    {"Codigo": "WEGE3", "Nome": "WEG"},
    
    # El√©tricas
    {"Codigo": "ELET3", "Nome": "Eletrobras ON"},
    {"Codigo": "ELET6", "Nome": "Eletrobras PNB"},
    {"Codigo": "ENBR3", "Nome": "EDP Brasil"},
    {"Codigo": "CMIG4", "Nome": "Cemig"},
    {"Codigo": "CPLE6", "Nome": "Copel"},
    {"Codigo": "TAEE11", "Nome": "Taesa"},
    {"Codigo": "ENGI11", "Nome": "Engie Brasil"},
    {"Codigo": "EQTL3", "Nome": "Equatorial"},
    {"Codigo": "EGIE3", "Nome": "Engie Brasil Energia"},
    {"Codigo": "NEOE3", "Nome": "Neoenergia"},
    {"Codigo": "TRPL4", "Nome": "Transmiss√£o Paulista"},
    
    # Varejo e consumo
    {"Codigo": "MGLU3", "Nome": "Magazine Luiza"},
    {"Codigo": "VIIA3", "Nome": "Via"},
    {"Codigo": "LREN3", "Nome": "Lojas Renner"},
    {"Codigo": "AMER3", "Nome": "Americanas"},
    {"Codigo": "RAIL3", "Nome": "Rumo"},
    {"Codigo": "ABEV3", "Nome": "Ambev"},
    {"Codigo": "B3SA3", "Nome": "B3"},
    {"Codigo": "CYRE3", "Nome": "Cyrela"},
    {"Codigo": "EZTC3", "Nome": "EZTEC"},
    {"Codigo": "MRVE3", "Nome": "MRV"},
    {"Codigo": "BRML3", "Nome": "BR Malls"},
    {"Codigo": "MULT3", "Nome": "Multiplan"},
    {"Codigo": "HYPE3", "Nome": "Hypera"},
    {"Codigo": "SULA11", "Nome": "SulAm√©rica"},
    {"Codigo": "VVAR3", "Nome": "Via Varejo"},
    {"Codigo": "CVCB3", "Nome": "CVC Brasil"},
    {"Codigo": "GRND3", "Nome": "Grendene"},
    {"Codigo": "HAPV3", "Nome": "Hapvida"},
    {"Codigo": "LWSA3", "Nome": "Locaweb"},
    {"Codigo": "MELI", "Nome": "Mercado Livre"},
    {"Codigo": "NTCO3", "Nome": "Natura & Co"},
    {"Codigo": "QUAL3", "Nome": "Qualicorp"},
    {"Codigo": "SOMA3", "Nome": "Grupo Soma"},
    {"Codigo": "TIMS3", "Nome": "TIM"},
    {"Codigo": "VIVT3", "Nome": "Telef√¥nica Brasil"},
    
    # FIIs populares
    {"Codigo": "HGLG11", "Nome": "CSHG Log√≠stica FII"},
    {"Codigo": "MXRF11", "Nome": "Maxi Renda FII"},
    {"Codigo": "KNRI11", "Nome": "Kinea Renda Imobili√°ria FII"},
    {"Codigo": "VISC11", "Nome": "Vinci Shopping Centers FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "HGBS11", "Nome": "CSHG Brasil Shopping FII"},
    {"Codigo": "BCFF11", "Nome": "BTG Pactual Fundo de Fundos FII"},
    {"Codigo": "VILG11", "Nome": "Vinci Log√≠stica FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "RECT11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RBRF11", "Nome": "RBR Alpha FII"},
    {"Codigo": "BBPO11", "Nome": "BB Progressivo II FII"},
    {"Codigo": "BRCR11", "Nome": "BTG Pactual Corporate Office Fund FII"},
    {"Codigo": "PLCR11", "Nome": "Plaza FII"},
    {"Codigo": "SHPH11", "Nome": "Shopping P√°tio Higien√≥polis FII"},
    {"Codigo": "ALZR11", "Nome": "Alianza Trust Renda Imobili√°ria FII"},
    {"Codigo": "ARCT11", "Nome": "Arctium Real Estate FII"},
    {"Codigo": "ARRI11", "Nome": "√Åtrio Reit Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "BARI11", "Nome": "Barigui Rendimentos Imobili√°rios FII"},
    {"Codigo": "BCRI11", "Nome": "BTG Pactual Cr√©dito Imobili√°rio FII"},
    {"Codigo": "BTLG11", "Nome": "BTG Pactual Log√≠stica FII"},
    {"Codigo": "CARE11", "Nome": "Mau√° Capital Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "DEVA11", "Nome": "Devant Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "FIIB11", "Nome": "Kinea √çndice de Pre√ßos FII"},
    {"Codigo": "FLMA11", "Nome": "FLMA Cr√©dito Imobili√°rio FII"},
    {"Codigo": "GGRC11", "Nome": "GGR Covepi FII"},
    {"Codigo": "HGCR11", "Nome": "CSHG Cr√©dito Imobili√°rio FII"},
    {"Codigo": "HGRU11", "Nome": "CSHG Renda Urbana FII"},
    {"Codigo": "HSAF11", "Nome": "Hsi Malls Fundo de Investimento Imobili√°rio"},
    {"Codigo": "IRDM11", "Nome": "Iridium Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "JSRE11", "Nome": "JS Real Estate Multigest√£o FII"},
    {"Codigo": "KFOF11", "Nome": "Kinea FoF FII"},
    {"Codigo": "KNSC11", "Nome": "Kinea Securities FII"},
    {"Codigo": "MALL11", "Nome": "Malls Brasil Plural FII"},
    {"Codigo": "MGFF11", "Nome": "Mogno Fundo de Investimento Imobili√°rio"},
    {"Codigo": "MORE11", "Nome": "More Real Estate FII"},
    {"Codigo": "NEWL11", "Nome": "Newport Log√≠stica FII"},
    {"Codigo": "PVBI11", "Nome": "VBI Prime Properties FII"},
    {"Codigo": "RBVA11", "Nome": "Rio Bravo Renda Varejo FII"},
    {"Codigo": "RBVO11", "Nome": "Rio Bravo Renda Varejo FII"},
    {"Codigo": "RCRB11", "Nome": "Rio Bravo Cr√©dito Imobili√°rio FII"},
    {"Codigo": "RCRI11", "Nome": "REC Renda Imobili√°ria FII"},
    {"Codigo": "RZAK11", "Nome": "Riza Akin FII"},
    {"Codigo": "SNCI11", "Nome": "Suno Receb√≠veis Imobili√°rios FII"},
    {"Codigo": "TEPP11", "Nome": "Tellus Properties FII"},
    {"Codigo": "TRXF11", "Nome": "TRX Real Estate FII"},
    {"Codigo": "URPR11", "Nome": "Urca Prime Renda FII"},
    {"Codigo": "VERE11", "Nome": "V√©rtice Renda Imobili√°ria FII"},
    {"Codigo": "VIFI11", "Nome": "Vinci Imobili√°rio FII"},
    {"Codigo": "VINO11", "Nome": "Vinci Offices FII"},
    {"Codigo": "VSLH11", "Nome": "Vinci Shopping FII"},
    {"Codigo": "XPCI11", "Nome": "XP Cr√©dito Imobili√°rio FII"},
    {"Codigo": "XPIN11", "Nome": "XP Industrial FII"},
    {"Codigo": "XPLG11", "Nome": "XP Log FII"},
    {"Codigo": "XPML11", "Nome": "XP Malls FII"},
    {"Codigo": "XPPR11", "Nome": "XP Properties FII"}
]

def carregar_ativos_b3():
    df = pd.DataFrame(ATIVOS_B3)
    df['NomeBusca'] = df['Nome'].str.lower().apply(lambda x: unicodedata.normalize('NFKD', str(x)).encode('ascii', errors='ignore').decode('utf-8'))
    df['CodigoBusca'] = df['Codigo'].str.lower()
    return df

def buscar_codigo_por_nome(nome, df_ativos):
    if df_ativos.empty:
        return None
    nome = nome.strip().lower()
    nome = unicodedata.normalize('NFKD', nome).encode('ascii', errors='ignore').decode('utf-8')
    resultados = df_ativos[df_ativos['NomeBusca'].str.contains(nome)]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    resultados = df_ativos[df_ativos['CodigoBusca'] == nome]
    if not resultados.empty:
        return resultados.iloc[0]['Codigo']
    return None

def formatar_codigo_acao(codigo):
    codigo = codigo.strip().upper()
    if not codigo.endswith('.SA'):
        codigo = f"{codigo}.SA"
    return codigo

def obter_dados(codigo):
    codigo_formatado = formatar_codigo_acao(codigo)
    acao = yf.Ticker(codigo_formatado)
    info = acao.info
    historico = acao.history(period="1y")

    return info, historico

def mostrar_dados_fundamentais(info):
    st.subheader("üìä Dados Fundamentais")
    
    # Criar colunas para os dados fundamentais
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### Informa√ß√µes B√°sicas")
        with st.container(): # Usando container para agrupar
            st.write(f"**Empresa/FII:** {info.get('longName', 'N/A')}")
            st.write(f"**Setor:** {info.get('sector', 'N/A')}")
            st.write(f"**Pre√ßo atual:** R$ {info.get('previousClose', 'N/A'):.2f}")
        
        st.markdown("### Indicadores de Valuation")
        with st.container(): # Usando container para agrupar
            st.write(f"**P/L:** {info.get('trailingPE', 'N/A')} *<small>(Pre√ßo/Lucro)</small>*", unsafe_allow_html=True)
            st.write(f"**P/VPA:** {info.get('priceToBook', 'N/A')} *<small>(Pre√ßo/Valor Patrimonial)</small>*", unsafe_allow_html=True)
            st.write(f"**EV/EBITDA:** {info.get('enterpriseToEbitda', 'N/A')} *<small>(Valor da Empresa/EBITDA)</small>*", unsafe_allow_html=True)
    
    with col2:
        st.markdown("### Indicadores de Rentabilidade")
        with st.container(): # Usando container para agrupar
            st.write(f"**Dividend Yield:** {round(info.get('dividendYield', 0) * 100, 2) if info.get('dividendYield') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**ROE:** {round(info.get('returnOnEquity', 0) * 100, 2) if info.get('returnOnEquity') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**Margem Bruta:** {round(info.get('grossMargins', 0) * 100, 2) if info.get('grossMargins') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**Margem L√≠quida:** {round(info.get('profitMargins', 0) * 100, 2) if info.get('profitMargins') is not None else 'N/A'}%", unsafe_allow_html=True)
        
        st.markdown("### Mais Indicadores de Rentabilidade")
        with st.container():
            st.write(f"**Margem EBITDA:** {round(info.get('ebitdaMargins', 0) * 100, 2) if info.get('ebitdaMargins') is not None else 'N/A'}%", unsafe_allow_html=True)
            st.write(f"**Margem Operacional:** {round(info.get('operatingMargins', 0) * 100, 2) if info.get('operatingMargins') is not None else 'N/A'}%", unsafe_allow_html=True)

        st.markdown("### Indicadores de Endividamento")
        with st.container(): # Usando container para agrupar
            st.write(f"**D√≠vida L√≠quida/EBITDA:** {info.get('debtToEbitda', 'N/A')}")
            st.write(f"**D√≠vida/Patrim√¥nio L√≠quido:** {info.get('debtToEquity', 'N/A')}") # Adicionando D√≠vida/PL
            st.write(f"**Liquidez Corrente:** {info.get('currentRatio', 'N/A')}")
            st.write(f"**Caixa Total:** R$ {info.get('totalCash', 'N/A'):,.2f}")
            st.write(f"**D√≠vida Total:** R$ {info.get('totalDebt', 'N/A'):,.2f}")

        st.markdown("### Indicadores de Fluxo de Caixa")
        with st.container():
            st.write(f"**Fluxo de Caixa Operacional:** R$ {info.get('operatingCashflow', 'N/A'):,.2f}")
            st.write(f"**Fluxo de Caixa Livre:** R$ {info.get('freeCashflow', 'N/A'):,.2f}")

def mostrar_grafico(historico):
    st.subheader("üìà Tend√™ncia de Pre√ßo")
    fig, ax = plt.subplots(figsize=(12, 6))
    historico['Close'].plot(ax=ax, color='#2196F3', linewidth=2)
    ax.set_ylabel("Pre√ßo de Fechamento (R$)")
    ax.set_xlabel("Data")
    ax.grid(True, linestyle='--', alpha=0.7)
    plt.xticks(rotation=45)
    st.pyplot(fig)

def mostrar_indicadores_historicos(acao):
    st.subheader("üìä Evolu√ß√£o dos Indicadores")
    
    try:
        # Obter dados hist√≥ricos dos indicadores
        # Usar um per√≠odo maior para ter mais dados hist√≥ricos
        historico_indicadores = acao.history(period="5y")
        
        # Criar colunas para os gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de P/L Hist√≥rico
            if 'trailingPE' in acao.info:
                st.markdown("### P/L Hist√≥rico")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Calcular P/L hist√≥rico usando pre√ßo e lucro por a√ß√£o
                if 'earningsPerShare' in acao.info and acao.info['earningsPerShare'] > 0:
                    pl_historico = historico_indicadores['Close'] / acao.info['earningsPerShare']
                    pl_historico.plot(ax=ax, color='#4CAF50', linewidth=2)
                    ax.set_ylabel("P/L")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    st.pyplot(fig)
            
            # Gr√°fico de Dividend Yield Hist√≥rico
            if not historico_indicadores['Dividends'].empty:
                st.markdown("### Dividend Yield Hist√≥rico")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Calcular DY hist√≥rico
                dy_historico = (historico_indicadores['Dividends'] / historico_indicadores['Close']) * 100
                dy_historico.plot(ax=ax, color='#FF9800', linewidth=2)
                ax.set_ylabel("Dividend Yield (%)")
                ax.grid(True, linestyle='--', alpha=0.7)
                st.pyplot(fig)
        
        with col2:
            # Gr√°fico de ROE Hist√≥rico
            if 'returnOnEquity' in acao.info:
                st.markdown("### ROE Hist√≥rico")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Usar ROE atual como refer√™ncia
                roe_atual = acao.info['returnOnEquity'] * 100
                ax.axhline(y=roe_atual, color='#9C27B0', linestyle='-', label=f'ROE Atual: {roe_atual:.2f}%')
                ax.set_ylabel("ROE (%)")
                ax.grid(True, linestyle='--', alpha=0.7)
                ax.legend()
                st.pyplot(fig)
            
            # Gr√°fico de Margem EBITDA Hist√≥rica
            if 'ebitdaMargins' in acao.info:
                st.markdown("### Margem EBITDA Hist√≥rica")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Usar margem EBITDA atual como refer√™ncia
                margem_atual = acao.info['ebitdaMargins'] * 100
                ax.axhline(y=margem_atual, color='#E91E63', linestyle='-', label=f'Margem Atual: {margem_atual:.2f}%')
                ax.set_ylabel("Margem EBITDA (%)")
                ax.grid(True, linestyle='--', alpha=0.7)
                ax.legend()
                st.pyplot(fig)
        
        # Adicionar mais indicadores em uma nova linha
        col3, col4 = st.columns(2)
        
        with col3:
            # Gr√°fico de D√≠vida/PL Hist√≥rico
            if 'debtToEquity' in acao.info:
                st.markdown("### D√≠vida/PL Hist√≥rico")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Usar D√≠vida/PL atual como refer√™ncia
                debt_equity_atual = acao.info['debtToEquity']
                ax.axhline(y=debt_equity_atual, color='#F44336', linestyle='-', label=f'D√≠vida/PL Atual: {debt_equity_atual:.2f}')
                ax.set_ylabel("D√≠vida/PL")
                ax.grid(True, linestyle='--', alpha=0.7)
                ax.legend()
                st.pyplot(fig)
        
        with col4:
            # Gr√°fico de P/VPA Hist√≥rico
            if 'priceToBook' in acao.info:
                st.markdown("### P/VPA Hist√≥rico")
                fig, ax = plt.subplots(figsize=(10, 4))
                # Calcular P/VPA hist√≥rico usando pre√ßo e VPA
                if 'bookValue' in acao.info and acao.info['bookValue'] > 0:
                    pvpa_historico = historico_indicadores['Close'] / acao.info['bookValue']
                    pvpa_historico.plot(ax=ax, color='#3F51B5', linewidth=2)
                    ax.set_ylabel("P/VPA")
                    ax.grid(True, linestyle='--', alpha=0.7)
                    st.pyplot(fig)
        
        # Adicionar nota explicativa
        st.info("""
        **Nota:** Alguns indicadores mostram apenas o valor atual como refer√™ncia (linha horizontal) 
        devido √† limita√ß√£o de dados hist√≥ricos dispon√≠veis no Yahoo Finance. 
        Os gr√°ficos de P/L, Dividend Yield e P/VPA mostram a evolu√ß√£o hist√≥rica quando os dados est√£o dispon√≠veis.
        """)
        
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel gerar os gr√°ficos de indicadores hist√≥ricos: {str(e)}")
        st.info("Alguns indicadores podem n√£o estar dispon√≠veis para este ativo ou per√≠odo.")

def analise_temporal(historico):
    st.subheader("‚è±Ô∏è An√°lise Temporal")
    historico.index = historico.index.tz_localize(None)
    tres_meses_atras = datetime.now() - timedelta(days=90)
    dados_3m = historico[historico.index >= tres_meses_atras]
    variacao_3m = ((dados_3m['Close'].iloc[-1] / dados_3m['Close'].iloc[0]) - 1) * 100 if not dados_3m.empty else 0
    seis_meses_atras = datetime.now() - timedelta(days=180)
    dados_6m = historico[historico.index >= seis_meses_atras]
    variacao_6m = ((dados_6m['Close'].iloc[-1] / dados_6m['Close'].iloc[0]) - 1) * 100 if not dados_6m.empty else 0
    variacao_1a = ((historico['Close'].iloc[-1] / historico['Close'].iloc[0]) - 1) * 100 if not historico.empty else 0
    
    col1, col2, col3 = st.columns(3)
    with col1:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 3 meses")
            st.metric(label="", value=f"{variacao_3m:.2f}%")
    with col2:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 6 meses")
            st.metric(label="", value=f"{variacao_6m:.2f}%")
    with col3:
        with st.container(): # Usando container para agrupar
            st.markdown("### Varia√ß√£o 1 ano")
            st.metric(label="", value=f"{variacao_1a:.2f}%")

# ====== NOVO: An√°lise Setorial e Not√≠cias ======
def analise_setorial_noticias(info, codigo_acao):
    st.subheader("üåê An√°lise Setorial e Not√≠cias")
    setor = info.get('sector', 'N/A')
    explicacao = {
        'Financial Services': 'Setor financeiro tende a ser resiliente, mas sens√≠vel a juros. Inclui bancos, seguradoras e servi√ßos de investimento.',
        'Energy': 'Setor de energia pode ser c√≠clico e sens√≠vel a commodities e geopol√≠tica. Inclui petr√≥leo, g√°s e energias renov√°veis.',
        'Utilities': 'Setor de utilidade p√∫blica costuma ser defensivo e regulado. Inclui empresas de energia el√©trica, √°gua e g√°s.',
        'Real Estate': 'Setor imobili√°rio √© sens√≠vel a juros, infla√ß√£o e ciclos econ√¥micos. Inclui construtoras, incorporadoras e fundos imobili√°rios (FIIs).',
        'Consumer Defensive': 'Setor defensivo, menos sens√≠vel a crises econ√¥micas. Inclui alimentos, bebidas, produtos dom√©sticos e higiene.',
        'Basic Materials': 'Setor de commodities √© c√≠clico e depende do mercado global e pre√ßos das mat√©rias-primas. Inclui minera√ß√£o, siderurgia, papel e celulose.',
        'Industrials': 'Setor industrial depende do crescimento econ√¥mico e investimento em infraestrutura. Inclui bens de capital, transporte e servi√ßos industriais.',
        'Healthcare': 'Setor de sa√∫de tende a ser resiliente. Inclui hospitais, laborat√≥rios e farmac√™uticas.',
        'Technology': 'Setor de tecnologia pode ter alto crescimento, mas tamb√©m volatilidade. Inclui software, hardware e servi√ßos de TI.',
        'Consumer Cyclical': 'Setor c√≠clico, sens√≠vel ao consumo e renda dispon√≠vel. Inclui varejo (n√£o defensivo), viagens e lazer.',
        'Communication Services': 'Setor de servi√ßos de comunica√ß√£o. Inclui telecomunica√ß√µes e m√≠dia.',
        'N/A': 'Setor n√£o informado.'
    }
    st.write(f"**Setor:** **{setor}**")
    st.info(explicacao.get(setor, 'Setor n√£o identificado ou sem explica√ß√£o detalhada dispon√≠vel.'))
    st.markdown("---")
    
    st.markdown("### üì∞ Not√≠cias Recentes")
    try:
        with st.spinner('Buscando not√≠cias recentes...'):
            ticker_obj = yf.Ticker(codigo_acao)
            noticias = ticker_obj.news
            
            if noticias:
                for n in noticias[:5]: # Exibir as 5 not√≠cias mais recentes
                    with st.container(): # Cada not√≠cia em um container
                        st.markdown(f"**[{n['title']}]({n['link']})**") # T√≠tulo clic√°vel
                        
                        # Formatar a data
                        try:
                            data = datetime.fromtimestamp(n['providerPublishTime'])
                            data_formatada = data.strftime('%d/%m/%Y %H:%M')
                        except:
                            data_formatada = "Data n√£o dispon√≠vel"
                        
                        # Exibir fonte e data
                        st.markdown(f"*Fonte: {n.get('publisher', 'Fonte n√£o dispon√≠vel')} - {data_formatada}* <br>", unsafe_allow_html=True)
                        
            else:
                st.info("Nenhuma not√≠cia recente encontrada para este ativo.")
                
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel buscar not√≠cias: {str(e)}")
        st.info("Dica: Alguns ativos podem n√£o ter not√≠cias dispon√≠veis ou podem estar com acesso temporariamente indispon√≠vel.")

# ====== MELHORIA: Recomenda√ß√µes personalizadas ======
def analise_sugestiva(info, perfil):
    st.subheader("üìå Recomenda√ß√µes por Horizonte de Investimento e Perfil")
    pl = info.get('trailingPE')
    dy = info.get('dividendYield')
    roe = info.get('returnOnEquity')
    debt_equity = info.get('debtToEquity')
    price_to_book = info.get('priceToBook')
    ev_ebitda = info.get('enterpriseToEbitda')
    debt_ebitda = info.get('debtToEbitda')
    current_ratio = info.get('currentRatio')
    payout_ratio = info.get('payoutRatio')

    # Novas m√©tricas
    ebitda_margins = info.get('ebitdaMargins')
    operating_margins = info.get('operatingMargins')
    operating_cashflow = info.get('operatingCashflow')
    free_cashflow = info.get('freeCashflow')

    sugestoes = []
    score = 0
    # Ajustar max_score para acomodar novas m√©tricas
    max_score = 15 # Aumentado para refletir mais crit√©rios

    # Pontua√ß√£o e sugest√µes baseadas no perfil

    # Crescimento (busca valoriza√ß√£o) / Longo prazo
    if 'crescimento' in perfil.lower() or 'longo' in perfil.lower():
        if roe is not None:
            if roe > 0.15: # Bom ROE para crescimento
                sugestoes.append("üìà ROE forte (Mais de 15%). Potencial de crescimento a longo prazo.")
                score += 2
            elif roe > 0.08:
                 sugestoes.append("‚ÑπÔ∏è ROE moderado. Rentabilidade razo√°vel sobre o patrim√¥nio.")
                 score += 1
        if pl is not None:
            if pl < 15: # P/L razo√°vel para crescimento
                sugestoes.append("‚úÖ P/L razo√°vel (Abaixo de 15). Indicativo de valoriza√ß√£o.")
                score += 2
            elif pl < 25:
                sugestoes.append("‚ÑπÔ∏è P/L moderado (Entre 15 e 25). Aten√ß√£o ao valuation.")
                score += 1
            else:
                sugestoes.append("‚ö†Ô∏è P/L elevado (Acima de 25). A√ß√£o pode estar cara para o perfil crescimento.")
                score -= 1
        
        # Adicionar crit√©rios de crescimento baseados em margens e fluxo de caixa
        if ebitda_margins is not None and ebitda_margins > 0.20: # Boa margem EBITDA
            sugestoes.append("üìà Alta Margem EBITDA (Mais de 20%). Sinal de efici√™ncia operacional.")
            score += 1
        if operating_margins is not None and operating_margins > 0.15: # Boa margem Operacional
            sugestoes.append("üìà Alta Margem Operacional (Mais de 15%). Indicia boa gest√£o de custos.")
            score += 1
        if free_cashflow is not None and free_cashflow > 0: # Gerando Fluxo de Caixa Livre
            sugestoes.append("üí∞ Gerando Fluxo de Caixa Livre positivo. Essencial para reinvestimento e crescimento.")
            score += 1

    # Dividendos (busca renda passiva)
    if 'dividendos' in perfil.lower():
        if dy is not None:
            if dy > 0.06: # Bom Dividend Yield
                sugestoes.append("üí∞ Excelente Dividend Yield (Mais de 6%). √ìtimo para renda passiva.")
                score += 3
            elif dy > 0.04:
                sugestoes.append("‚úÖ Bom Dividend Yield (Entre 4% e 6%). Boa op√ß√£o para dividendos.")
                score += 2
            elif dy > 0.02:
                 sugestoes.append("‚ÑπÔ∏è Dividend Yield moderado (Entre 2% e 4%).")
                 score += 1
            else:
                sugestoes.append("‚ö†Ô∏è Dividend Yield baixo (Abaixo de 2%). N√£o ideal para foco em dividendos.")
                score -= 1
        else:
             sugestoes.append("‚ÑπÔ∏è Dividend Yield n√£o dispon√≠vel ou muito baixo.")
             score -= 1
        if payout_ratio is not None and payout_ratio > 0.5 and payout_ratio < 1.1: # Payout saud√°vel (distribui lucro)
             sugestoes.append("‚úÖ Payout Ratio saud√°vel. Empresa distribui parte do lucro como dividendos.")
             score += 1
        elif payout_ratio is not None and payout_ratio >= 1.1:
             sugestoes.append("‚ö†Ô∏è Payout Ratio acima de 100%. Empresa pode estar distribuindo mais do que lucra.")
             score -= 1
        # Adicionar crit√©rio de fluxo de caixa para dividendos (gerar caixa para pagar proventos)
        if operating_cashflow is not None and operating_cashflow > 0: # Gerando Fluxo de Caixa Operacional positivo
             sugestoes.append("üí∞ Gerando Fluxo de Caixa Operacional positivo. Essencial para sustentar dividendos.")
             score += 1

    # Risco e Sa√∫de Financeira (Baixa toler√¢ncia / Neutro)
    if 'baixa' in perfil.lower() or 'neutro' in perfil.lower():
        if debt_equity is not None:
            if debt_equity < 0.8: # Baixa alavancagem
                sugestoes.append("üí™ Baixa alavancagem financeira (D√≠vida/Patrim√¥nio abaixo de 0.8). Baixo risco financeiro.")
                score += 2
            elif debt_equity < 1.5:
                sugestoes.append("‚úÖ Alavancagem financeira moderada (D√≠vida/Patrim√¥nio entre 0.8 e 1.5).")
                score += 1
            else:
                sugestoes.append(f"‚ö†Ô∏è Alavancagem financeira elevada (D√≠vida/Patrim√¥nio: {debt_equity:.2f}). Maior risco financeiro para perfil conservador.")
                score -= 2
        if debt_ebitda is not None:
            if debt_ebitda < 2: # Baixa d√≠vida em rela√ß√£o ao Ebitda
                 sugestoes.append("üí™ D√≠vida L√≠quida/EBITDA baixa (Abaixo de 2). Empresa gera caixa para pagar d√≠vida.")
                 score += 2
            elif debt_ebitda < 3.5:
                 sugestoes.append("‚úÖ D√≠vida L√≠quida/EBITDA moderada (Entre 2 e 3.5).")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è D√≠vida L√≠quida/EBITDA elevada ({debt_ebitda:.2f}). Aten√ß√£o ao endividamento.")
                 score -= 2
        if current_ratio is not None:
            if current_ratio > 1.8: # Boa liquidez
                 sugestoes.append("üí™ √ìtima liquidez corrente (Acima de 1.8). Forte capacidade de pagar d√≠vidas de curto prazo.")
                 score += 2
            elif current_ratio > 1.2:
                 sugestoes.append("‚úÖ Boa liquidez corrente (Entre 1.2 e 1.8). Capacidade saud√°vel de pagamento no curto prazo.")
                 score += 1
            else:
                 sugestoes.append(f"‚ö†Ô∏è Liquidez corrente baixa ({current_ratio:.2f}). Aten√ß√£o √† capacidade de pagamento no curto prazo.")
                 score -= 2

        # Adicionar crit√©rios de sa√∫de financeira baseados em margens e fluxo de caixa
        if ebitda_margins is not None and ebitda_margins > 0.10: # Margem EBITDA razo√°vel para sa√∫de
             sugestoes.append("‚úÖ Margem EBITDA razo√°vel. Boa capacidade de gerar caixa operacional antes de deprecia√ß√£o/amortiza√ß√£o.")
             score += 1
        if operating_margins is not None and operating_margins > 0.08: # Margem Operacional razo√°vel para sa√∫de
             sugestoes.append("‚úÖ Margem Operacional razo√°vel. Indicia controle sobre custos operacionais.")
             score += 1
        if operating_cashflow is not None and operating_cashflow > 0: # Gerando Fluxo de Caixa Operacional positivo
             sugestoes.append("üí™ Gerando Fluxo de Caixa Operacional positivo. Fundamental para a sustentabilidade.")
             score += 1

    # Risco (Alta toler√¢ncia)
    if 'alta' in perfil.lower():
         if debt_equity is not None and debt_equity > 2.5: # Alta alavancagem pode ser tolerada, mas com alerta
              sugestoes.append(f"‚ÑπÔ∏è Alavancagem alta ({debt_equity:.2f}). Perfil de maior risco pode considerar, mas com cautela.")

    # Recomenda√ß√µes gerais de Valuation (para todos, exceto se conflitar muito com perfil espec√≠fico)
    if 'neutro' in perfil.lower() or ('crescimento' not in perfil.lower() and 'dividendos' not in perfil.lower()):
        if pl is not None and pl > 25:
            sugestoes.append(f"‚ö†Ô∏è P/L elevado ({pl:.2f}), aten√ß√£o ao valuation.")
        if price_to_book is not None and price_to_book > 2.5:
            sugestoes.append(f"‚ö†Ô∏è P/VPA elevado ({price_to_book:.2f}), aten√ß√£o ao valuation.")
        if ev_ebitda is not None and ev_ebitda > 15:
            sugestoes.append(f"‚ö†Ô∏è EV/EBITDA elevado ({ev_ebitda:.2f}). Pode indicar empresa cara.")

    # Ajustar score para a escala 0-10 (simplificado)
    # Definir limites m√≠nimos e m√°ximos razo√°veis para o score bruto
    # Recalcular min_raw_score e max_raw_score com base nas novas m√©tricas
    min_raw_score_novo = -12 # Estimativa ajustada
    max_raw_score_novo = 17 # Estimativa ajustada
    # Mapear o score bruto para a escala 0-10
    score_final = max(0, min(10, round((score - min_raw_score_novo) / (max_raw_score_novo - min_raw_score_novo) * 10)))

    st.markdown("--- ")
    st.subheader("Sum√°rio e Score Fundamental (Simplificado)")
    st.write(f"**Perfil Selecionado:** {perfil}")
    st.write(f"**Score Fundamental (0-10):** **{score_final}/10**")
    if score_final >= 8:
        st.success("‚≠ê An√°lise Fundamentalista Forte para o perfil.")
    elif score_final >= 5:
        st.info("‚úÖ An√°lise Fundamentalista Moderada para o perfil.")
    else:
        st.warning("‚ö†Ô∏è An√°lise Fundamentalista Apresenta Pontos de Aten√ß√£o para o perfil.")

    st.markdown("--- ")
    st.subheader("Detalhamento das Sugest√µes:")
    if not sugestoes:
        st.info("Sem alertas ou sugest√µes relevantes com base nos indicadores e perfil selecionado.")
    for s in sugestoes:
        if "üìà" in s or "üí∞" in s or "üí™" in s or "‚úÖ" in s:
            st.success(s)
        elif "‚ö†Ô∏è" in s:
            st.warning(s)
        else:
            st.info(s)

def buscar_acoes_tradingview():
    """
    Busca todas as a√ß√µes listadas no TradingView Screener
    """
    if not SELENIUM_AVAILABLE:
        st.error("‚ùå O m√≥dulo Selenium n√£o est√° dispon√≠vel. Por favor, instale-o usando: pip install selenium webdriver_manager")
        st.info("üí° Alternativa: Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")
        return []
        
    try:
        st.info("üîÑ Iniciando busca de a√ß√µes no TradingView...")
        
        # Configurar o Chrome em modo headless
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        # Inicializar o driver
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=chrome_options)
        
        try:
            # Acessar o TradingView Screener
            driver.get("https://br.tradingview.com/screener/")
            
            # Aguardar o carregamento da p√°gina
            time.sleep(5)  # Aguardar carregamento inicial
            
            # Aguardar at√© que a tabela de a√ß√µes seja carregada
            wait = WebDriverWait(driver, 20)
            tabela = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "tv-screener-table")))
            
            # Extrair dados das a√ß√µes
            acoes = []
            linhas = tabela.find_elements(By.TAG_NAME, "tr")
            
            for linha in linhas[1:]:  # Pular o cabe√ßalho
                colunas = linha.find_elements(By.TAG_NAME, "td")
                if len(colunas) >= 2:
                    codigo = colunas[0].text.strip()
                    nome = colunas[1].text.strip()
                    if codigo and nome:
                        acoes.append({
                            "Codigo": codigo,
                            "Nome": nome
                        })
            
            if acoes:
                # Atualizar a lista global de ativos
                global ATIVOS_B3
                ATIVOS_B3 = acoes
                return acoes
            else:
                st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a√ß√µes no TradingView.")
                return []
                
        finally:
            driver.quit()
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes no TradingView: {str(e)}")
        st.info("üí° Alternativa: Use a lista predefinida de a√ß√µes ou adicione manualmente os c√≥digos desejados.")
        return []

def buscar_acoes_brasileiras():
    """
    Busca todas as a√ß√µes brasileiras usando a API do Yahoo Finance
    """
    try:
        # Lista de √≠ndices brasileiros para buscar a√ß√µes
        indices = ['^BVSP', '^IBXX']  # Bovespa e IBXX
        
        todas_acoes = []
        for indice in indices:
            ticker = yf.Ticker(indice)
            # Buscar componentes do √≠ndice
            componentes = ticker.info.get('components', [])
            if componentes:
                for componente in componentes:
                    if isinstance(componente, str) and componente.endswith('.SA'):
                        codigo = componente.replace('.SA', '')
                        try:
                            info = yf.Ticker(componente).info
                            nome = info.get('longName', codigo)
                            todas_acoes.append({
                                "Codigo": codigo,
                                "Nome": nome
                            })
                        except:
                            continue
        
        if todas_acoes:
            # Atualizar a lista global de ativos
            global ATIVOS_B3
            ATIVOS_B3 = todas_acoes
            return todas_acoes
        else:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel encontrar a√ß√µes brasileiras.")
            return []
            
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar a√ß√µes brasileiras: {str(e)}")
        return []

def adicionar_acao_manual():
    """
    Permite que o usu√°rio adicione uma a√ß√£o manualmente
    """
    st.subheader("‚ûï Adicionar Nova A√ß√£o")
    
    col1, col2 = st.columns(2)
    with col1:
        codigo = st.text_input("C√≥digo da a√ß√£o (ex: PETR4):").strip().upper()
    with col2:
        nome = st.text_input("Nome da empresa:").strip()
    
    if st.button("Adicionar"):
        if codigo and nome:
            try:
                # Verificar se a a√ß√£o existe no Yahoo Finance
                ticker = yf.Ticker(f"{codigo}.SA")
                info = ticker.info
                
                if info:
                    # Adicionar √† lista global
                    global ATIVOS_B3
                    nova_acao = {
                        "Codigo": codigo,
                        "Nome": nome
                    }
                    ATIVOS_B3.append(nova_acao)
                    st.success(f"‚úÖ A√ß√£o {codigo} adicionada com sucesso!")
                else:
                    st.error("‚ùå A√ß√£o n√£o encontrada no Yahoo Finance.")
            except Exception as e:
                st.error(f"‚ùå Erro ao adicionar a√ß√£o: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Preencha todos os campos.")

def calcular_preco_justo_graham(lpa, vpa):
    """
    Calcula o Pre√ßo Justo de Benjamin Graham (f√≥rmula simplificada VI = ‚àö(22,5 x LPA x VPA)).
    Retorna None se os dados necess√°rios n√£o estiverem dispon√≠veis ou forem inv√°lidos.
    """
    if lpa is None or vpa is None or lpa <= 0 or vpa <= 0:
        return None
    try:
        # F√≥rmula simplificada de Graham: VI = sqrt(22.5 * LPA * VPA)
        # Alguns usam um multiplicador de 15x PL e 1.5x P/VPA, cujo produto √© 22.5
        preco_justo = math.sqrt(22.5 * lpa * vpa)
        return preco_justo
    except:
        return None

def calcular_preco_teto_barsi(historico, info, taxa_desejada=0.06):
    """
    Calcula o Pre√ßo Teto de D√©cio Barsi.
    Usa a m√©dia do Dividend Yield dos √∫ltimos 5 anos e a taxa de retorno desejada.
    Retorna None se os dados necess√°rios n√£o estiverem dispon√≠veis ou forem inv√°lidos.
    """
    if historico.empty or info is None:
        return None

    try:
        # Obter hist√≥rico de dividendos e pre√ßos dos √∫ltimos 5 anos
        hoje = datetime.now()
        cinco_anos_atras = hoje - timedelta(days=5*365) # Aproximadamente 5 anos

        # Filtrar hist√≥rico de pre√ßos para os √∫ltimos 5 anos
        historico_5a = historico[historico.index >= cinco_anos_atras]

        if historico_5a.empty:
            return None

        # Calcular o DY anual para cada um dos √∫ltimos 5 anos
        yields_anuais = []
        for ano in range(hoje.year - 4, hoje.year + 1): # √öltimos 5 anos (inclusive o atual incompleto)
            inicio_ano = datetime(ano, 1, 1)
            fim_ano = datetime(ano, 12, 31) if ano < hoje.year else hoje

            historico_ano = historico[(historico.index >= inicio_ano) & (historico.index <= fim_ano)]
            if historico_ano.empty:
                continue

            # Obter dividendos pagos no ano
            # Nota: yfinance .dividends retorna a s√©rie de dividendos, precisamos filtrar pelo per√≠odo
            # Isso pode ser um pouco complexo de alinhar perfeitamente com o hist√≥rico de pre√ßos do per√≠odo.
            # Uma abordagem mais robusta seria pegar os dividendos de todo o per√≠odo e agrup√°-los por ano,
            # e usar o pre√ßo m√©dio ou o pre√ßo final do ano para calcular o yield anual.

            # Simplificando: vamos somar os dividendos pagos no ano e dividir pelo pre√ßo m√©dio do ano
            try:
                acao_temp = yf.Ticker(info.get('symbol'))
                dividendos_periodo = acao_temp.dividends[(acao_temp.dividends.index >= inicio_ano) & (acao_temp.dividends.index <= fim_ano)]
                total_dividendos_ano = dividendos_periodo.sum()
            except:
                total_dividendos_ano = 0 # Nenhum dividendo no ano ou erro

            preco_medio_ano = historico_ano['Close'].mean()

            if preco_medio_ano > 0:
                yield_anual = total_dividendos_ano / preco_medio_ano
                yields_anuais.append(yield_anual)

        if not yields_anuais:
            return None

        media_yields = sum(yields_anuais) / len(yields_anuais)

        if taxa_desejada > 0 and media_yields > 0:
            preco_teto = (media_yields * info.get('previousClose', 0)) / taxa_desejada # Multiplicar pelo pre√ßo atual para ter o valor em R$
            return preco_teto
        else:
            return None
    except Exception as e:
        # st.error(f"Erro no c√°lculo do Pre√ßo Teto: {e}") # Remover em produ√ß√£o
        return None

def analise_especifica_fii(codigo):
    """
    Realiza an√°lise espec√≠fica para FIIs, buscando m√©tricas importantes
    """
    st.subheader("üè¢ An√°lise Espec√≠fica de FII")
    
    try:
        # Tentar obter dados do FII
        fii = yf.Ticker(codigo)
        info = fii.info
        
        # Verificar se √© realmente um FII
        if not info.get('quoteType') == 'ETF' or not codigo.endswith('11'):
            st.warning("‚ö†Ô∏è Este ativo n√£o parece ser um FII. Algumas m√©tricas podem n√£o ser aplic√°veis.")
            return
        
        # Criar colunas para organizar as informa√ß√µes
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üìä M√©tricas de Distribui√ß√£o")
            # Dividend Yield (j√° dispon√≠vel no Yahoo Finance)
            dy = info.get('dividendYield', 0) * 100 if info.get('dividendYield') is not None else None
            if dy is not None:
                st.write(f"**Dividend Yield:** {dy:.2f}%")
            
            # Payout (j√° dispon√≠vel no Yahoo Finance)
            payout = info.get('payoutRatio', 0) * 100 if info.get('payoutRatio') is not None else None
            if payout is not None:
                st.write(f"**Payout:** {payout:.2f}%")
            
            # Valor Patrimonial por Cota (VPC)
            vpc = info.get('bookValue')
            if vpc is not None:
                st.write(f"**Valor Patrimonial por Cota (VPC):** R$ {vpc:.2f}")
            
            # P/VPC (Pre√ßo/Valor Patrimonial por Cota)
            p_vpc = info.get('priceToBook')
            if p_vpc is not None:
                st.write(f"**P/VPC:** {p_vpc:.2f}")
        
        with col2:
            st.markdown("### üìà M√©tricas de Gest√£o")
            # Patrim√¥nio L√≠quido
            pl = info.get('totalAssets')
            if pl is not None:
                st.write(f"**Patrim√¥nio L√≠quido:** R$ {pl:,.2f}")
            
            # N√∫mero de Cotistas (se dispon√≠vel)
            cotistas = info.get('sharesOutstanding')
            if cotistas is not None:
                st.write(f"**N√∫mero de Cotas:** {cotistas:,.0f}")
            
            # Taxa de Administra√ß√£o (se dispon√≠vel)
            taxa_admin = info.get('annualReportExpenseRatio', 0) * 100 if info.get('annualReportExpenseRatio') is not None else None
            if taxa_admin is not None:
                st.write(f"**Taxa de Administra√ß√£o:** {taxa_admin:.2f}%")
        
        # Adicionar alertas e recomenda√ß√µes espec√≠ficas para FIIs
        st.markdown("### ‚ö†Ô∏è Alertas e Recomenda√ß√µes")
        
        # Verificar Dividend Yield
        if dy is not None:
            if dy < 6:
                st.warning("‚ö†Ô∏è Dividend Yield abaixo de 6%. Verifique se o FII est√° distribuindo adequadamente.")
            elif dy > 12:
                st.warning("‚ö†Ô∏è Dividend Yield muito alto (>12%). Verifique a sustentabilidade da distribui√ß√£o.")
        
        # Verificar P/VPC
        if p_vpc is not None:
            if p_vpc > 1.2:
                st.warning("‚ö†Ô∏è P/VPC acima de 1.2. O FII pode estar negociando com √°gio significativo.")
            elif p_vpc < 0.8:
                st.info("‚ÑπÔ∏è P/VPC abaixo de 0.8. O FII pode estar negociando com des√°gio.")
        
        # Verificar Taxa de Administra√ß√£o
        if taxa_admin is not None:
            if taxa_admin > 1.5:
                st.warning("‚ö†Ô∏è Taxa de administra√ß√£o elevada (>1.5%). Pode impactar significativamente os retornos.")
        
        # Adicionar nota sobre limita√ß√µes
        st.info("""
        **Nota:** Algumas m√©tricas importantes para FIIs como Vac√¢ncia F√≠sica/Financeira, 
        Prazo M√©dio dos Contratos e N√∫mero de Cotistas podem n√£o estar dispon√≠veis no Yahoo Finance. 
        Recomenda-se consultar o site do FII ou a CVM para informa√ß√µes mais detalhadas.
        """)
        
    except Exception as e:
        st.error(f"‚ùå Erro ao analisar FII: {str(e)}")
        st.info("üí° Algumas m√©tricas podem n√£o estar dispon√≠veis para este FII.")

# App Streamlit
st.title("üìà Avaliador de A√ß√µes e FIIs")

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes")
    perfil = st.selectbox(
        'Qual seu perfil de investimento?',
        [
            'Neutro',
            'Crescimento (busca valoriza√ß√£o)',
            'Dividendos (busca renda passiva)',
            'Curto prazo',
            'M√©dio prazo',
            'Longo prazo',
            'Baixa toler√¢ncia a risco',
            'Alta toler√¢ncia a risco'
        ]
    )
    
    st.markdown("---")
    st.markdown("### üìö Guia R√°pido")
    with st.expander("Como analisar uma a√ß√£o ou FII?"):
        st.markdown("""
        **1. An√°lise Fundamentalista**  
        - Lucro e crescimento
        - Valuation
        - Endividamento
        - Governan√ßa
        
        **2. An√°lise T√©cnica**  
        - Tend√™ncias
        - Volume
        - Indicadores
        
        **3. An√°lise Setorial**
        - Setor
        - Economia
        - Riscos
        """)

    # Adicionar se√ß√£o para adicionar a√ß√µes manualmente na sidebar
    st.markdown("---")
    with st.expander("‚ûï Adicionar A√ß√£o Manualmente"):
        adicionar_acao_manual()

# √Årea principal
col1, col2 = st.columns([2, 1])
with col1:
    nome_empresa = st.text_input("üîç Nome da empresa ou fundo:")
    df_ativos = carregar_ativos_b3()
    codigo_sugerido = ""
    if not df_ativos.empty and nome_empresa:
        codigo_sugerido = buscar_codigo_por_nome(nome_empresa, df_ativos)

with col2:
    if codigo_sugerido:
        st.info(f"üí° C√≥digo sugerido: {codigo_sugerido}")
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:", value=codigo_sugerido)
    else:
        codigo = st.text_input("üìù C√≥digo da a√ß√£o/FII:")

if st.button("üîç Analisar"):
    try:
        with st.spinner('Carregando dados...'):
            info, historico = obter_dados(codigo)
            
            # Criar abas para organizar as informa√ß√µes
            tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
                "üìä Dados Fundamentais",
                "üìà Gr√°fico e An√°lise Temporal",
                "üåê An√°lise Setorial",
                "üìå Recomenda√ß√µes",
                "üí∞ Valuation Avan√ßado",
                "üìú Demonstra√ß√µes Financeiras Hist√≥ricas",
                "üè¢ An√°lise FII"
            ])
            
            with tab1:
                mostrar_dados_fundamentais(info)
            
            with tab2:
                mostrar_grafico(historico)
                analise_temporal(historico)
                mostrar_indicadores_historicos(yf.Ticker(codigo))
            
            with tab3:
                analise_setorial_noticias(info, codigo)
            
            with tab4:
                analise_sugestiva(info, perfil)

            with tab5:
                st.subheader("üí∞ Valuation Avan√ßado")

                # C√°lculo e exibi√ß√£o do Pre√ßo Justo de Graham
                lpa = info.get('earningsPerShare', None)
                vpa = info.get('bookValue', None)
                preco_justo = calcular_preco_justo_graham(lpa, vpa)

                st.markdown("### Pre√ßo Justo de Benjamin Graham (Simplificado)")
                if preco_justo is not None:
                    st.write(f"**Pre√ßo Justo:** R$ {preco_justo:.2f}")
                    preco_atual = info.get('previousClose')
                    if preco_atual is not None:
                        if preco_atual < preco_justo:
                            st.success(f"‚úÖ Pre√ßo atual (R$ {preco_atual:.2f}) est√° ABAIXO do Pre√ßo Justo de Graham.")
                        elif preco_atual > preco_justo:
                            st.warning(f"‚ö†Ô∏è Pre√ßo atual (R$ {preco_atual:.2f}) est√° ACIMA do Pre√ßo Justo de Graham.")
                        else:
                             st.info(f"‚ÑπÔ∏è Pre√ßo atual (R$ {preco_atual:.2f}) √© igual ao Pre√ßo Justo de Graham.")
                else:
                    # Mensagem mais espec√≠fica
                    mensagem_erro_graham = "N√£o foi poss√≠vel calcular o Pre√ßo Justo de Graham. "
                    if lpa is None or lpa <= 0:
                        mensagem_erro_graham += "LPA (Lucro por A√ß√£o) n√£o dispon√≠vel ou inv√°lido. "
                    if vpa is None or vpa <= 0:
                        mensagem_erro_graham += "VPA (Valor Patrimonial por A√ß√£o) n√£o dispon√≠vel ou inv√°lido."
                    if lpa is not None and vpa is not None and lpa > 0 and vpa > 0:
                         mensagem_erro_graham = "Erro no c√°lculo do Pre√ßo Justo de Graham." # Erro inesperado
                    st.info(mensagem_erro_graham.strip())

                st.markdown("--- ")

                # C√°lculo e exibi√ß√£o do Pre√ßo Teto de Barsi
                preco_teto = calcular_preco_teto_barsi(historico, info)

                st.markdown("### Pre√ßo Teto de D√©cio Barsi (Taxa Desejada: 6%)")
                if preco_teto is not None:
                    st.write(f"**Pre√ßo Teto:** R$ {preco_teto:.2f}")
                    preco_atual = info.get('previousClose')
                    if preco_atual is not None:
                        if preco_atual < preco_teto:
                            st.success(f"‚úÖ Pre√ßo atual (R$ {preco_atual:.2f}) est√° ABAIXO do Pre√ßo Teto de Barsi.")
                        elif preco_atual > preco_teto:
                            st.warning(f"‚ö†Ô∏è Pre√ßo atual (R$ {preco_atual:.2f}) est√° ACIMA do Pre√ßo Teto de Barsi.")
                        else:
                            st.info(f"‚ÑπÔ∏è Pre√ßo atual (R$ {preco_atual:.2f}) √© igual ao Pre√ßo Teto de Barsi.")
                else:
                    # Mensagem mais espec√≠fica
                    mensagem_erro_barsi = "N√£o foi poss√≠vel calcular o Pre√ßo Teto de Barsi. "
                    if historico.empty:
                         mensagem_erro_barsi += "Hist√≥rico de pre√ßos n√£o dispon√≠vel. "
                    if info is None:
                         mensagem_erro_barsi += "Informa√ß√µes do ativo n√£o dispon√≠veis. "
                    # A fun√ß√£o calcular_preco_teto_barsi j√° trata a falta de dividendos ou m√©dia zero internamente,
                    # mas podemos adicionar uma nota sobre a depend√™ncia do hist√≥rico de dividendos.
                    mensagem_erro_barsi += "Verifique se o hist√≥rico de dividendos dos √∫ltimos 5 anos est√° dispon√≠vel no Yahoo Finance para este ativo."
                    st.info(mensagem_erro_barsi.strip())
                
            with tab6: # Conte√∫do da nova aba
                st.subheader("üìú Demonstra√ß√µes Financeiras Hist√≥ricas")

                try:
                    # Obter demonstra√ß√µes financeiras
                    acao = yf.Ticker(codigo)
                    financials = acao.financials
                    balance_sheet = acao.balance_sheet
                    cashflow = acao.cashflow

                    # Exibir Income Statement
                    st.markdown("### Demonstrativo de Resultados (Income Statement)")
                    if not financials.empty:
                        # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(financials.T.style.format(precision=2))
                    else:
                        st.info("Demonstrativo de Resultados n√£o dispon√≠vel.")

                    st.markdown("--- ")

                    # Exibir Balan√ßo Patrimonial
                    st.markdown("### Balan√ßo Patrimonial (Balance Sheet)")
                    if not balance_sheet.empty:
                         # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(balance_sheet.T.style.format(precision=2))
                    else:
                        st.info("Balan√ßo Patrimonial n√£o dispon√≠vel.")

                    st.markdown("--- ")

                    # Exibir Fluxo de Caixa
                    st.markdown("### Demonstrativo de Fluxo de Caixa (Cash Flow)")
                    if not cashflow.empty:
                         # Transpor o DataFrame para que as datas fiquem nas colunas
                        st.dataframe(cashflow.T.style.format(precision=2))
                    else:
                        st.info("Demonstrativo de Fluxo de Caixa n√£o dispon√≠vel.")

                except Exception as e:
                    st.warning(f"N√£o foi poss√≠vel obter ou exibir as demonstra√ß√µes financeiras: {str(e)}")
                    st.info("Verifique se o ativo √© uma a√ß√£o (FIIs geralmente n√£o t√™m demonstra√ß√µes detalhadas no yfinance) ou se os dados est√£o dispon√≠veis para este per√≠odo.")
                
            with tab7:
                analise_especifica_fii(codigo)
                
    except Exception as e:
        st.error(f"‚ùå Erro ao buscar dados: {str(e)}")
        st.info("üí° Dica: Verifique se o c√≥digo da a√ß√£o/FII est√° correto e tente novamente.")
